// Code generated by MockGen. DO NOT EDIT.
// Source: stock_brands_daily_stock_price_interactor.go
//
// Generated by this command:
//
//	mockgen -source=stock_brands_daily_stock_price_interactor.go -package=mock_usecase -destination=../mock/usecase/stock_brands_daily_stock_price_interactor.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockStockBrandsDailyPriceInteractor is a mock of StockBrandsDailyPriceInteractor interface.
type MockStockBrandsDailyPriceInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockStockBrandsDailyPriceInteractorMockRecorder
	isgomock struct{}
}

// MockStockBrandsDailyPriceInteractorMockRecorder is the mock recorder for MockStockBrandsDailyPriceInteractor.
type MockStockBrandsDailyPriceInteractorMockRecorder struct {
	mock *MockStockBrandsDailyPriceInteractor
}

// NewMockStockBrandsDailyPriceInteractor creates a new mock instance.
func NewMockStockBrandsDailyPriceInteractor(ctrl *gomock.Controller) *MockStockBrandsDailyPriceInteractor {
	mock := &MockStockBrandsDailyPriceInteractor{ctrl: ctrl}
	mock.recorder = &MockStockBrandsDailyPriceInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStockBrandsDailyPriceInteractor) EXPECT() *MockStockBrandsDailyPriceInteractorMockRecorder {
	return m.recorder
}

// CreateDailyStockPrice mocks base method.
func (m *MockStockBrandsDailyPriceInteractor) CreateDailyStockPrice(ctx context.Context, now time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDailyStockPrice", ctx, now)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDailyStockPrice indicates an expected call of CreateDailyStockPrice.
func (mr *MockStockBrandsDailyPriceInteractorMockRecorder) CreateDailyStockPrice(ctx, now any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDailyStockPrice", reflect.TypeOf((*MockStockBrandsDailyPriceInteractor)(nil).CreateDailyStockPrice), ctx, now)
}

// CreateHistoricalDailyStockPrices mocks base method.
func (m *MockStockBrandsDailyPriceInteractor) CreateHistoricalDailyStockPrices(ctx context.Context, now time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHistoricalDailyStockPrices", ctx, now)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateHistoricalDailyStockPrices indicates an expected call of CreateHistoricalDailyStockPrices.
func (mr *MockStockBrandsDailyPriceInteractorMockRecorder) CreateHistoricalDailyStockPrices(ctx, now any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHistoricalDailyStockPrices", reflect.TypeOf((*MockStockBrandsDailyPriceInteractor)(nil).CreateHistoricalDailyStockPrices), ctx, now)
}
