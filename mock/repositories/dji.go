// Code generated by MockGen. DO NOT EDIT.
// Source: dji.go
//
// Generated by this command:
//
//	mockgen -source=dji.go -package=mock_repositories -destination=../mock/repositories/dji.go
//

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	reflect "reflect"

	models "github.com/Code0716/stock-price-repository/models"
	gomock "go.uber.org/mock/gomock"
)

// MockDjiRepository is a mock of DjiRepository interface.
type MockDjiRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDjiRepositoryMockRecorder
	isgomock struct{}
}

// MockDjiRepositoryMockRecorder is the mock recorder for MockDjiRepository.
type MockDjiRepositoryMockRecorder struct {
	mock *MockDjiRepository
}

// NewMockDjiRepository creates a new mock instance.
func NewMockDjiRepository(ctrl *gomock.Controller) *MockDjiRepository {
	mock := &MockDjiRepository{ctrl: ctrl}
	mock.recorder = &MockDjiRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDjiRepository) EXPECT() *MockDjiRepositoryMockRecorder {
	return m.recorder
}

// CreateDjiStockAverageDailyPrices mocks base method.
func (m *MockDjiRepository) CreateDjiStockAverageDailyPrices(ctx context.Context, averageDailyPrices models.IndexStockAverageDailyPrices) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDjiStockAverageDailyPrices", ctx, averageDailyPrices)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDjiStockAverageDailyPrices indicates an expected call of CreateDjiStockAverageDailyPrices.
func (mr *MockDjiRepositoryMockRecorder) CreateDjiStockAverageDailyPrices(ctx, averageDailyPrices any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDjiStockAverageDailyPrices", reflect.TypeOf((*MockDjiRepository)(nil).CreateDjiStockAverageDailyPrices), ctx, averageDailyPrices)
}
