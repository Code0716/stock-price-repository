// Code generated by MockGen. DO NOT EDIT.
// Source: stock_brands_daily_stock_price.go
//
// Generated by this command:
//
//	mockgen -source=stock_brands_daily_stock_price.go -package=mock_repositories -destination=../mock/repositories/stock_brands_daily_stock_price.go
//

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	reflect "reflect"

	models "github.com/Code0716/stock-price-repository/models"
	gomock "go.uber.org/mock/gomock"
)

// MockStockBrandsDailyPriceRepository is a mock of StockBrandsDailyPriceRepository interface.
type MockStockBrandsDailyPriceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStockBrandsDailyPriceRepositoryMockRecorder
	isgomock struct{}
}

// MockStockBrandsDailyPriceRepositoryMockRecorder is the mock recorder for MockStockBrandsDailyPriceRepository.
type MockStockBrandsDailyPriceRepositoryMockRecorder struct {
	mock *MockStockBrandsDailyPriceRepository
}

// NewMockStockBrandsDailyPriceRepository creates a new mock instance.
func NewMockStockBrandsDailyPriceRepository(ctrl *gomock.Controller) *MockStockBrandsDailyPriceRepository {
	mock := &MockStockBrandsDailyPriceRepository{ctrl: ctrl}
	mock.recorder = &MockStockBrandsDailyPriceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStockBrandsDailyPriceRepository) EXPECT() *MockStockBrandsDailyPriceRepositoryMockRecorder {
	return m.recorder
}

// CreateStockBrandDailyPrice mocks base method.
func (m *MockStockBrandsDailyPriceRepository) CreateStockBrandDailyPrice(ctx context.Context, dailyPrice []*models.StockBrandDailyPrice) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStockBrandDailyPrice", ctx, dailyPrice)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStockBrandDailyPrice indicates an expected call of CreateStockBrandDailyPrice.
func (mr *MockStockBrandsDailyPriceRepositoryMockRecorder) CreateStockBrandDailyPrice(ctx, dailyPrice any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStockBrandDailyPrice", reflect.TypeOf((*MockStockBrandsDailyPriceRepository)(nil).CreateStockBrandDailyPrice), ctx, dailyPrice)
}

// DeleteByIDs mocks base method.
func (m *MockStockBrandsDailyPriceRepository) DeleteByIDs(ctx context.Context, ids []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByIDs", ctx, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByIDs indicates an expected call of DeleteByIDs.
func (mr *MockStockBrandsDailyPriceRepositoryMockRecorder) DeleteByIDs(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByIDs", reflect.TypeOf((*MockStockBrandsDailyPriceRepository)(nil).DeleteByIDs), ctx, ids)
}

// GetLatestPriceBySymbol mocks base method.
func (m *MockStockBrandsDailyPriceRepository) GetLatestPriceBySymbol(ctx context.Context, symbol string) (*models.StockBrandDailyPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestPriceBySymbol", ctx, symbol)
	ret0, _ := ret[0].(*models.StockBrandDailyPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestPriceBySymbol indicates an expected call of GetLatestPriceBySymbol.
func (mr *MockStockBrandsDailyPriceRepositoryMockRecorder) GetLatestPriceBySymbol(ctx, symbol any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestPriceBySymbol", reflect.TypeOf((*MockStockBrandsDailyPriceRepository)(nil).GetLatestPriceBySymbol), ctx, symbol)
}

// ListDailyPricesBySymbol mocks base method.
func (m *MockStockBrandsDailyPriceRepository) ListDailyPricesBySymbol(ctx context.Context, filter models.ListDailyPricesBySymbolFilter) ([]*models.StockBrandDailyPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDailyPricesBySymbol", ctx, filter)
	ret0, _ := ret[0].([]*models.StockBrandDailyPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDailyPricesBySymbol indicates an expected call of ListDailyPricesBySymbol.
func (mr *MockStockBrandsDailyPriceRepositoryMockRecorder) ListDailyPricesBySymbol(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDailyPricesBySymbol", reflect.TypeOf((*MockStockBrandsDailyPriceRepository)(nil).ListDailyPricesBySymbol), ctx, filter)
}

// ListLatestPriceBySymbols mocks base method.
func (m *MockStockBrandsDailyPriceRepository) ListLatestPriceBySymbols(ctx context.Context, symbols []*string) ([]*models.StockBrandDailyPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLatestPriceBySymbols", ctx, symbols)
	ret0, _ := ret[0].([]*models.StockBrandDailyPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLatestPriceBySymbols indicates an expected call of ListLatestPriceBySymbols.
func (mr *MockStockBrandsDailyPriceRepositoryMockRecorder) ListLatestPriceBySymbols(ctx, symbols any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLatestPriceBySymbols", reflect.TypeOf((*MockStockBrandsDailyPriceRepository)(nil).ListLatestPriceBySymbols), ctx, symbols)
}
