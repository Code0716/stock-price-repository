// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen_query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Code0716/stock-price-repository/infrastructure/database/gen_model"
)

func newNikkeiStockAverageDailyPrice(db *gorm.DB, opts ...gen.DOOption) nikkeiStockAverageDailyPrice {
	_nikkeiStockAverageDailyPrice := nikkeiStockAverageDailyPrice{}

	_nikkeiStockAverageDailyPrice.nikkeiStockAverageDailyPriceDo.UseDB(db, opts...)
	_nikkeiStockAverageDailyPrice.nikkeiStockAverageDailyPriceDo.UseModel(&gen_model.NikkeiStockAverageDailyPrice{})

	tableName := _nikkeiStockAverageDailyPrice.nikkeiStockAverageDailyPriceDo.TableName()
	_nikkeiStockAverageDailyPrice.ALL = field.NewAsterisk(tableName)
	_nikkeiStockAverageDailyPrice.Date = field.NewTime(tableName, "date")
	_nikkeiStockAverageDailyPrice.OpenPrice = field.NewFloat64(tableName, "open_price")
	_nikkeiStockAverageDailyPrice.ClosePrice = field.NewFloat64(tableName, "close_price")
	_nikkeiStockAverageDailyPrice.HighPrice = field.NewFloat64(tableName, "high_price")
	_nikkeiStockAverageDailyPrice.LowPrice = field.NewFloat64(tableName, "low_price")
	_nikkeiStockAverageDailyPrice.AdjClosePrice = field.NewFloat64(tableName, "adj_close_price")
	_nikkeiStockAverageDailyPrice.CreatedAt = field.NewTime(tableName, "created_at")
	_nikkeiStockAverageDailyPrice.UpdatedAt = field.NewTime(tableName, "updated_at")

	_nikkeiStockAverageDailyPrice.fillFieldMap()

	return _nikkeiStockAverageDailyPrice
}

type nikkeiStockAverageDailyPrice struct {
	nikkeiStockAverageDailyPriceDo

	ALL           field.Asterisk
	Date          field.Time    // date
	OpenPrice     field.Float64 // 始値
	ClosePrice    field.Float64 // 終値
	HighPrice     field.Float64 // 高値
	LowPrice      field.Float64 // 安値
	AdjClosePrice field.Float64 // 配当や株式分割を考慮した終値
	CreatedAt     field.Time    // created_at
	UpdatedAt     field.Time    // updated_at

	fieldMap map[string]field.Expr
}

func (n nikkeiStockAverageDailyPrice) Table(newTableName string) *nikkeiStockAverageDailyPrice {
	n.nikkeiStockAverageDailyPriceDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n nikkeiStockAverageDailyPrice) As(alias string) *nikkeiStockAverageDailyPrice {
	n.nikkeiStockAverageDailyPriceDo.DO = *(n.nikkeiStockAverageDailyPriceDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *nikkeiStockAverageDailyPrice) updateTableName(table string) *nikkeiStockAverageDailyPrice {
	n.ALL = field.NewAsterisk(table)
	n.Date = field.NewTime(table, "date")
	n.OpenPrice = field.NewFloat64(table, "open_price")
	n.ClosePrice = field.NewFloat64(table, "close_price")
	n.HighPrice = field.NewFloat64(table, "high_price")
	n.LowPrice = field.NewFloat64(table, "low_price")
	n.AdjClosePrice = field.NewFloat64(table, "adj_close_price")
	n.CreatedAt = field.NewTime(table, "created_at")
	n.UpdatedAt = field.NewTime(table, "updated_at")

	n.fillFieldMap()

	return n
}

func (n *nikkeiStockAverageDailyPrice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *nikkeiStockAverageDailyPrice) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 8)
	n.fieldMap["date"] = n.Date
	n.fieldMap["open_price"] = n.OpenPrice
	n.fieldMap["close_price"] = n.ClosePrice
	n.fieldMap["high_price"] = n.HighPrice
	n.fieldMap["low_price"] = n.LowPrice
	n.fieldMap["adj_close_price"] = n.AdjClosePrice
	n.fieldMap["created_at"] = n.CreatedAt
	n.fieldMap["updated_at"] = n.UpdatedAt
}

func (n nikkeiStockAverageDailyPrice) clone(db *gorm.DB) nikkeiStockAverageDailyPrice {
	n.nikkeiStockAverageDailyPriceDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n nikkeiStockAverageDailyPrice) replaceDB(db *gorm.DB) nikkeiStockAverageDailyPrice {
	n.nikkeiStockAverageDailyPriceDo.ReplaceDB(db)
	return n
}

type nikkeiStockAverageDailyPriceDo struct{ gen.DO }

type INikkeiStockAverageDailyPriceDo interface {
	gen.SubQuery
	Debug() INikkeiStockAverageDailyPriceDo
	WithContext(ctx context.Context) INikkeiStockAverageDailyPriceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() INikkeiStockAverageDailyPriceDo
	WriteDB() INikkeiStockAverageDailyPriceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) INikkeiStockAverageDailyPriceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INikkeiStockAverageDailyPriceDo
	Not(conds ...gen.Condition) INikkeiStockAverageDailyPriceDo
	Or(conds ...gen.Condition) INikkeiStockAverageDailyPriceDo
	Select(conds ...field.Expr) INikkeiStockAverageDailyPriceDo
	Where(conds ...gen.Condition) INikkeiStockAverageDailyPriceDo
	Order(conds ...field.Expr) INikkeiStockAverageDailyPriceDo
	Distinct(cols ...field.Expr) INikkeiStockAverageDailyPriceDo
	Omit(cols ...field.Expr) INikkeiStockAverageDailyPriceDo
	Join(table schema.Tabler, on ...field.Expr) INikkeiStockAverageDailyPriceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INikkeiStockAverageDailyPriceDo
	RightJoin(table schema.Tabler, on ...field.Expr) INikkeiStockAverageDailyPriceDo
	Group(cols ...field.Expr) INikkeiStockAverageDailyPriceDo
	Having(conds ...gen.Condition) INikkeiStockAverageDailyPriceDo
	Limit(limit int) INikkeiStockAverageDailyPriceDo
	Offset(offset int) INikkeiStockAverageDailyPriceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INikkeiStockAverageDailyPriceDo
	Unscoped() INikkeiStockAverageDailyPriceDo
	Create(values ...*gen_model.NikkeiStockAverageDailyPrice) error
	CreateInBatches(values []*gen_model.NikkeiStockAverageDailyPrice, batchSize int) error
	Save(values ...*gen_model.NikkeiStockAverageDailyPrice) error
	First() (*gen_model.NikkeiStockAverageDailyPrice, error)
	Take() (*gen_model.NikkeiStockAverageDailyPrice, error)
	Last() (*gen_model.NikkeiStockAverageDailyPrice, error)
	Find() ([]*gen_model.NikkeiStockAverageDailyPrice, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.NikkeiStockAverageDailyPrice, err error)
	FindInBatches(result *[]*gen_model.NikkeiStockAverageDailyPrice, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*gen_model.NikkeiStockAverageDailyPrice) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INikkeiStockAverageDailyPriceDo
	Assign(attrs ...field.AssignExpr) INikkeiStockAverageDailyPriceDo
	Joins(fields ...field.RelationField) INikkeiStockAverageDailyPriceDo
	Preload(fields ...field.RelationField) INikkeiStockAverageDailyPriceDo
	FirstOrInit() (*gen_model.NikkeiStockAverageDailyPrice, error)
	FirstOrCreate() (*gen_model.NikkeiStockAverageDailyPrice, error)
	FindByPage(offset int, limit int) (result []*gen_model.NikkeiStockAverageDailyPrice, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INikkeiStockAverageDailyPriceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (n nikkeiStockAverageDailyPriceDo) Debug() INikkeiStockAverageDailyPriceDo {
	return n.withDO(n.DO.Debug())
}

func (n nikkeiStockAverageDailyPriceDo) WithContext(ctx context.Context) INikkeiStockAverageDailyPriceDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n nikkeiStockAverageDailyPriceDo) ReadDB() INikkeiStockAverageDailyPriceDo {
	return n.Clauses(dbresolver.Read)
}

func (n nikkeiStockAverageDailyPriceDo) WriteDB() INikkeiStockAverageDailyPriceDo {
	return n.Clauses(dbresolver.Write)
}

func (n nikkeiStockAverageDailyPriceDo) Session(config *gorm.Session) INikkeiStockAverageDailyPriceDo {
	return n.withDO(n.DO.Session(config))
}

func (n nikkeiStockAverageDailyPriceDo) Clauses(conds ...clause.Expression) INikkeiStockAverageDailyPriceDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n nikkeiStockAverageDailyPriceDo) Returning(value interface{}, columns ...string) INikkeiStockAverageDailyPriceDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n nikkeiStockAverageDailyPriceDo) Not(conds ...gen.Condition) INikkeiStockAverageDailyPriceDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n nikkeiStockAverageDailyPriceDo) Or(conds ...gen.Condition) INikkeiStockAverageDailyPriceDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n nikkeiStockAverageDailyPriceDo) Select(conds ...field.Expr) INikkeiStockAverageDailyPriceDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n nikkeiStockAverageDailyPriceDo) Where(conds ...gen.Condition) INikkeiStockAverageDailyPriceDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n nikkeiStockAverageDailyPriceDo) Order(conds ...field.Expr) INikkeiStockAverageDailyPriceDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n nikkeiStockAverageDailyPriceDo) Distinct(cols ...field.Expr) INikkeiStockAverageDailyPriceDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n nikkeiStockAverageDailyPriceDo) Omit(cols ...field.Expr) INikkeiStockAverageDailyPriceDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n nikkeiStockAverageDailyPriceDo) Join(table schema.Tabler, on ...field.Expr) INikkeiStockAverageDailyPriceDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n nikkeiStockAverageDailyPriceDo) LeftJoin(table schema.Tabler, on ...field.Expr) INikkeiStockAverageDailyPriceDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n nikkeiStockAverageDailyPriceDo) RightJoin(table schema.Tabler, on ...field.Expr) INikkeiStockAverageDailyPriceDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n nikkeiStockAverageDailyPriceDo) Group(cols ...field.Expr) INikkeiStockAverageDailyPriceDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n nikkeiStockAverageDailyPriceDo) Having(conds ...gen.Condition) INikkeiStockAverageDailyPriceDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n nikkeiStockAverageDailyPriceDo) Limit(limit int) INikkeiStockAverageDailyPriceDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n nikkeiStockAverageDailyPriceDo) Offset(offset int) INikkeiStockAverageDailyPriceDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n nikkeiStockAverageDailyPriceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INikkeiStockAverageDailyPriceDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n nikkeiStockAverageDailyPriceDo) Unscoped() INikkeiStockAverageDailyPriceDo {
	return n.withDO(n.DO.Unscoped())
}

func (n nikkeiStockAverageDailyPriceDo) Create(values ...*gen_model.NikkeiStockAverageDailyPrice) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n nikkeiStockAverageDailyPriceDo) CreateInBatches(values []*gen_model.NikkeiStockAverageDailyPrice, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n nikkeiStockAverageDailyPriceDo) Save(values ...*gen_model.NikkeiStockAverageDailyPrice) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n nikkeiStockAverageDailyPriceDo) First() (*gen_model.NikkeiStockAverageDailyPrice, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.NikkeiStockAverageDailyPrice), nil
	}
}

func (n nikkeiStockAverageDailyPriceDo) Take() (*gen_model.NikkeiStockAverageDailyPrice, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.NikkeiStockAverageDailyPrice), nil
	}
}

func (n nikkeiStockAverageDailyPriceDo) Last() (*gen_model.NikkeiStockAverageDailyPrice, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.NikkeiStockAverageDailyPrice), nil
	}
}

func (n nikkeiStockAverageDailyPriceDo) Find() ([]*gen_model.NikkeiStockAverageDailyPrice, error) {
	result, err := n.DO.Find()
	return result.([]*gen_model.NikkeiStockAverageDailyPrice), err
}

func (n nikkeiStockAverageDailyPriceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.NikkeiStockAverageDailyPrice, err error) {
	buf := make([]*gen_model.NikkeiStockAverageDailyPrice, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n nikkeiStockAverageDailyPriceDo) FindInBatches(result *[]*gen_model.NikkeiStockAverageDailyPrice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n nikkeiStockAverageDailyPriceDo) Attrs(attrs ...field.AssignExpr) INikkeiStockAverageDailyPriceDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n nikkeiStockAverageDailyPriceDo) Assign(attrs ...field.AssignExpr) INikkeiStockAverageDailyPriceDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n nikkeiStockAverageDailyPriceDo) Joins(fields ...field.RelationField) INikkeiStockAverageDailyPriceDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n nikkeiStockAverageDailyPriceDo) Preload(fields ...field.RelationField) INikkeiStockAverageDailyPriceDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n nikkeiStockAverageDailyPriceDo) FirstOrInit() (*gen_model.NikkeiStockAverageDailyPrice, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.NikkeiStockAverageDailyPrice), nil
	}
}

func (n nikkeiStockAverageDailyPriceDo) FirstOrCreate() (*gen_model.NikkeiStockAverageDailyPrice, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.NikkeiStockAverageDailyPrice), nil
	}
}

func (n nikkeiStockAverageDailyPriceDo) FindByPage(offset int, limit int) (result []*gen_model.NikkeiStockAverageDailyPrice, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n nikkeiStockAverageDailyPriceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n nikkeiStockAverageDailyPriceDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n nikkeiStockAverageDailyPriceDo) Delete(models ...*gen_model.NikkeiStockAverageDailyPrice) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *nikkeiStockAverageDailyPriceDo) withDO(do gen.Dao) *nikkeiStockAverageDailyPriceDo {
	n.DO = *do.(*gen.DO)
	return n
}
