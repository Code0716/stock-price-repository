// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen_query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Code0716/stock-price-repository/infrastructure/database/gen_model"
)

func newSector33AverageDailyPrice(db *gorm.DB, opts ...gen.DOOption) sector33AverageDailyPrice {
	_sector33AverageDailyPrice := sector33AverageDailyPrice{}

	_sector33AverageDailyPrice.sector33AverageDailyPriceDo.UseDB(db, opts...)
	_sector33AverageDailyPrice.sector33AverageDailyPriceDo.UseModel(&gen_model.Sector33AverageDailyPrice{})

	tableName := _sector33AverageDailyPrice.sector33AverageDailyPriceDo.TableName()
	_sector33AverageDailyPrice.ALL = field.NewAsterisk(tableName)
	_sector33AverageDailyPrice.ID = field.NewString(tableName, "id")
	_sector33AverageDailyPrice.Date = field.NewTime(tableName, "date")
	_sector33AverageDailyPrice.Sector33Code = field.NewString(tableName, "sector_33_code")
	_sector33AverageDailyPrice.OpenPrice = field.NewFloat64(tableName, "open_price")
	_sector33AverageDailyPrice.ClosePrice = field.NewFloat64(tableName, "close_price")
	_sector33AverageDailyPrice.HighPrice = field.NewFloat64(tableName, "high_price")
	_sector33AverageDailyPrice.LowPrice = field.NewFloat64(tableName, "low_price")
	_sector33AverageDailyPrice.AdjClosePrice = field.NewFloat64(tableName, "adj_close_price")
	_sector33AverageDailyPrice.CreatedAt = field.NewTime(tableName, "created_at")
	_sector33AverageDailyPrice.UpdatedAt = field.NewTime(tableName, "updated_at")

	_sector33AverageDailyPrice.fillFieldMap()

	return _sector33AverageDailyPrice
}

type sector33AverageDailyPrice struct {
	sector33AverageDailyPriceDo

	ALL           field.Asterisk
	ID            field.String  // uuid
	Date          field.Time    // date
	Sector33Code  field.String  // 33業種コード
	OpenPrice     field.Float64 // 始値
	ClosePrice    field.Float64 // 終値
	HighPrice     field.Float64 // 高値
	LowPrice      field.Float64 // 安値
	AdjClosePrice field.Float64 // 配当や株式分割を考慮した終値
	CreatedAt     field.Time    // created_at
	UpdatedAt     field.Time    // updated_at

	fieldMap map[string]field.Expr
}

func (s sector33AverageDailyPrice) Table(newTableName string) *sector33AverageDailyPrice {
	s.sector33AverageDailyPriceDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sector33AverageDailyPrice) As(alias string) *sector33AverageDailyPrice {
	s.sector33AverageDailyPriceDo.DO = *(s.sector33AverageDailyPriceDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sector33AverageDailyPrice) updateTableName(table string) *sector33AverageDailyPrice {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.Date = field.NewTime(table, "date")
	s.Sector33Code = field.NewString(table, "sector_33_code")
	s.OpenPrice = field.NewFloat64(table, "open_price")
	s.ClosePrice = field.NewFloat64(table, "close_price")
	s.HighPrice = field.NewFloat64(table, "high_price")
	s.LowPrice = field.NewFloat64(table, "low_price")
	s.AdjClosePrice = field.NewFloat64(table, "adj_close_price")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *sector33AverageDailyPrice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sector33AverageDailyPrice) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["date"] = s.Date
	s.fieldMap["sector_33_code"] = s.Sector33Code
	s.fieldMap["open_price"] = s.OpenPrice
	s.fieldMap["close_price"] = s.ClosePrice
	s.fieldMap["high_price"] = s.HighPrice
	s.fieldMap["low_price"] = s.LowPrice
	s.fieldMap["adj_close_price"] = s.AdjClosePrice
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s sector33AverageDailyPrice) clone(db *gorm.DB) sector33AverageDailyPrice {
	s.sector33AverageDailyPriceDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sector33AverageDailyPrice) replaceDB(db *gorm.DB) sector33AverageDailyPrice {
	s.sector33AverageDailyPriceDo.ReplaceDB(db)
	return s
}

type sector33AverageDailyPriceDo struct{ gen.DO }

type ISector33AverageDailyPriceDo interface {
	gen.SubQuery
	Debug() ISector33AverageDailyPriceDo
	WithContext(ctx context.Context) ISector33AverageDailyPriceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISector33AverageDailyPriceDo
	WriteDB() ISector33AverageDailyPriceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISector33AverageDailyPriceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISector33AverageDailyPriceDo
	Not(conds ...gen.Condition) ISector33AverageDailyPriceDo
	Or(conds ...gen.Condition) ISector33AverageDailyPriceDo
	Select(conds ...field.Expr) ISector33AverageDailyPriceDo
	Where(conds ...gen.Condition) ISector33AverageDailyPriceDo
	Order(conds ...field.Expr) ISector33AverageDailyPriceDo
	Distinct(cols ...field.Expr) ISector33AverageDailyPriceDo
	Omit(cols ...field.Expr) ISector33AverageDailyPriceDo
	Join(table schema.Tabler, on ...field.Expr) ISector33AverageDailyPriceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISector33AverageDailyPriceDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISector33AverageDailyPriceDo
	Group(cols ...field.Expr) ISector33AverageDailyPriceDo
	Having(conds ...gen.Condition) ISector33AverageDailyPriceDo
	Limit(limit int) ISector33AverageDailyPriceDo
	Offset(offset int) ISector33AverageDailyPriceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISector33AverageDailyPriceDo
	Unscoped() ISector33AverageDailyPriceDo
	Create(values ...*gen_model.Sector33AverageDailyPrice) error
	CreateInBatches(values []*gen_model.Sector33AverageDailyPrice, batchSize int) error
	Save(values ...*gen_model.Sector33AverageDailyPrice) error
	First() (*gen_model.Sector33AverageDailyPrice, error)
	Take() (*gen_model.Sector33AverageDailyPrice, error)
	Last() (*gen_model.Sector33AverageDailyPrice, error)
	Find() ([]*gen_model.Sector33AverageDailyPrice, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.Sector33AverageDailyPrice, err error)
	FindInBatches(result *[]*gen_model.Sector33AverageDailyPrice, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*gen_model.Sector33AverageDailyPrice) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISector33AverageDailyPriceDo
	Assign(attrs ...field.AssignExpr) ISector33AverageDailyPriceDo
	Joins(fields ...field.RelationField) ISector33AverageDailyPriceDo
	Preload(fields ...field.RelationField) ISector33AverageDailyPriceDo
	FirstOrInit() (*gen_model.Sector33AverageDailyPrice, error)
	FirstOrCreate() (*gen_model.Sector33AverageDailyPrice, error)
	FindByPage(offset int, limit int) (result []*gen_model.Sector33AverageDailyPrice, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISector33AverageDailyPriceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sector33AverageDailyPriceDo) Debug() ISector33AverageDailyPriceDo {
	return s.withDO(s.DO.Debug())
}

func (s sector33AverageDailyPriceDo) WithContext(ctx context.Context) ISector33AverageDailyPriceDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sector33AverageDailyPriceDo) ReadDB() ISector33AverageDailyPriceDo {
	return s.Clauses(dbresolver.Read)
}

func (s sector33AverageDailyPriceDo) WriteDB() ISector33AverageDailyPriceDo {
	return s.Clauses(dbresolver.Write)
}

func (s sector33AverageDailyPriceDo) Session(config *gorm.Session) ISector33AverageDailyPriceDo {
	return s.withDO(s.DO.Session(config))
}

func (s sector33AverageDailyPriceDo) Clauses(conds ...clause.Expression) ISector33AverageDailyPriceDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sector33AverageDailyPriceDo) Returning(value interface{}, columns ...string) ISector33AverageDailyPriceDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sector33AverageDailyPriceDo) Not(conds ...gen.Condition) ISector33AverageDailyPriceDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sector33AverageDailyPriceDo) Or(conds ...gen.Condition) ISector33AverageDailyPriceDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sector33AverageDailyPriceDo) Select(conds ...field.Expr) ISector33AverageDailyPriceDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sector33AverageDailyPriceDo) Where(conds ...gen.Condition) ISector33AverageDailyPriceDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sector33AverageDailyPriceDo) Order(conds ...field.Expr) ISector33AverageDailyPriceDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sector33AverageDailyPriceDo) Distinct(cols ...field.Expr) ISector33AverageDailyPriceDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sector33AverageDailyPriceDo) Omit(cols ...field.Expr) ISector33AverageDailyPriceDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sector33AverageDailyPriceDo) Join(table schema.Tabler, on ...field.Expr) ISector33AverageDailyPriceDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sector33AverageDailyPriceDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISector33AverageDailyPriceDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sector33AverageDailyPriceDo) RightJoin(table schema.Tabler, on ...field.Expr) ISector33AverageDailyPriceDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sector33AverageDailyPriceDo) Group(cols ...field.Expr) ISector33AverageDailyPriceDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sector33AverageDailyPriceDo) Having(conds ...gen.Condition) ISector33AverageDailyPriceDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sector33AverageDailyPriceDo) Limit(limit int) ISector33AverageDailyPriceDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sector33AverageDailyPriceDo) Offset(offset int) ISector33AverageDailyPriceDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sector33AverageDailyPriceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISector33AverageDailyPriceDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sector33AverageDailyPriceDo) Unscoped() ISector33AverageDailyPriceDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sector33AverageDailyPriceDo) Create(values ...*gen_model.Sector33AverageDailyPrice) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sector33AverageDailyPriceDo) CreateInBatches(values []*gen_model.Sector33AverageDailyPrice, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sector33AverageDailyPriceDo) Save(values ...*gen_model.Sector33AverageDailyPrice) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sector33AverageDailyPriceDo) First() (*gen_model.Sector33AverageDailyPrice, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Sector33AverageDailyPrice), nil
	}
}

func (s sector33AverageDailyPriceDo) Take() (*gen_model.Sector33AverageDailyPrice, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Sector33AverageDailyPrice), nil
	}
}

func (s sector33AverageDailyPriceDo) Last() (*gen_model.Sector33AverageDailyPrice, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Sector33AverageDailyPrice), nil
	}
}

func (s sector33AverageDailyPriceDo) Find() ([]*gen_model.Sector33AverageDailyPrice, error) {
	result, err := s.DO.Find()
	return result.([]*gen_model.Sector33AverageDailyPrice), err
}

func (s sector33AverageDailyPriceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.Sector33AverageDailyPrice, err error) {
	buf := make([]*gen_model.Sector33AverageDailyPrice, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sector33AverageDailyPriceDo) FindInBatches(result *[]*gen_model.Sector33AverageDailyPrice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sector33AverageDailyPriceDo) Attrs(attrs ...field.AssignExpr) ISector33AverageDailyPriceDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sector33AverageDailyPriceDo) Assign(attrs ...field.AssignExpr) ISector33AverageDailyPriceDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sector33AverageDailyPriceDo) Joins(fields ...field.RelationField) ISector33AverageDailyPriceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sector33AverageDailyPriceDo) Preload(fields ...field.RelationField) ISector33AverageDailyPriceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sector33AverageDailyPriceDo) FirstOrInit() (*gen_model.Sector33AverageDailyPrice, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Sector33AverageDailyPrice), nil
	}
}

func (s sector33AverageDailyPriceDo) FirstOrCreate() (*gen_model.Sector33AverageDailyPrice, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Sector33AverageDailyPrice), nil
	}
}

func (s sector33AverageDailyPriceDo) FindByPage(offset int, limit int) (result []*gen_model.Sector33AverageDailyPrice, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sector33AverageDailyPriceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sector33AverageDailyPriceDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sector33AverageDailyPriceDo) Delete(models ...*gen_model.Sector33AverageDailyPrice) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sector33AverageDailyPriceDo) withDO(do gen.Dao) *sector33AverageDailyPriceDo {
	s.DO = *do.(*gen.DO)
	return s
}
