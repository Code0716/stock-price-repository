// Code generated by MockGen. DO NOT EDIT.
// Source: slack.go
//
// Generated by this command:
//
//	mockgen -source=slack.go -package=mock_gateway -destination=../../mock/gateway/slack.go
//

// Package mock_gateway is a generated GoMock package.
package mock_gateway

import (
	context "context"
	reflect "reflect"

	gateway "github.com/Code0716/stock-price-repository/infrastructure/gateway"
	resource "github.com/Code0716/stock-price-repository/infrastructure/gateway/resource"
	gomock "go.uber.org/mock/gomock"
)

// MockSlackAPIClient is a mock of SlackAPIClient interface.
type MockSlackAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockSlackAPIClientMockRecorder
	isgomock struct{}
}

// MockSlackAPIClientMockRecorder is the mock recorder for MockSlackAPIClient.
type MockSlackAPIClientMockRecorder struct {
	mock *MockSlackAPIClient
}

// NewMockSlackAPIClient creates a new mock instance.
func NewMockSlackAPIClient(ctrl *gomock.Controller) *MockSlackAPIClient {
	mock := &MockSlackAPIClient{ctrl: ctrl}
	mock.recorder = &MockSlackAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlackAPIClient) EXPECT() *MockSlackAPIClientMockRecorder {
	return m.recorder
}

// SendErrMessageNotification mocks base method.
func (m *MockSlackAPIClient) SendErrMessageNotification(ctx context.Context, err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendErrMessageNotification", ctx, err)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendErrMessageNotification indicates an expected call of SendErrMessageNotification.
func (mr *MockSlackAPIClientMockRecorder) SendErrMessageNotification(ctx, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendErrMessageNotification", reflect.TypeOf((*MockSlackAPIClient)(nil).SendErrMessageNotification), ctx, err)
}

// SendMessage mocks base method.
func (m *MockSlackAPIClient) SendMessage(ctx context.Context, channelName gateway.SlackChannelName, message resource.SlackMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, channelName, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockSlackAPIClientMockRecorder) SendMessage(ctx, channelName, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockSlackAPIClient)(nil).SendMessage), ctx, channelName, message)
}

// SendMessageByStrings mocks base method.
func (m *MockSlackAPIClient) SendMessageByStrings(ctx context.Context, channelName gateway.SlackChannelName, title string, message, ts *string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessageByStrings", ctx, channelName, title, message, ts)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessageByStrings indicates an expected call of SendMessageByStrings.
func (mr *MockSlackAPIClientMockRecorder) SendMessageByStrings(ctx, channelName, title, message, ts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageByStrings", reflect.TypeOf((*MockSlackAPIClient)(nil).SendMessageByStrings), ctx, channelName, title, message, ts)
}
