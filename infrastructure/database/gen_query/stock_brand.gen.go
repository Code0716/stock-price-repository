// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen_query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Code0716/stock-price-repository/infrastructure/database/gen_model"
)

func newStockBrand(db *gorm.DB, opts ...gen.DOOption) stockBrand {
	_stockBrand := stockBrand{}

	_stockBrand.stockBrandDo.UseDB(db, opts...)
	_stockBrand.stockBrandDo.UseModel(&gen_model.StockBrand{})

	tableName := _stockBrand.stockBrandDo.TableName()
	_stockBrand.ALL = field.NewAsterisk(tableName)
	_stockBrand.ID = field.NewString(tableName, "id")
	_stockBrand.TickerSymbol = field.NewString(tableName, "ticker_symbol")
	_stockBrand.Name = field.NewString(tableName, "name")
	_stockBrand.MarketCode = field.NewString(tableName, "market_code")
	_stockBrand.MarketName = field.NewString(tableName, "market_name")
	_stockBrand.Sector33Code = field.NewString(tableName, "sector_33_code")
	_stockBrand.Sector33CodeName = field.NewString(tableName, "sector_33_code_name")
	_stockBrand.Sector17Code = field.NewString(tableName, "sector_17_code")
	_stockBrand.Sector17CodeName = field.NewString(tableName, "sector_17_code_name")
	_stockBrand.CreatedAt = field.NewTime(tableName, "created_at")
	_stockBrand.UpdatedAt = field.NewTime(tableName, "updated_at")
	_stockBrand.DeletedAt = field.NewField(tableName, "deleted_at")

	_stockBrand.fillFieldMap()

	return _stockBrand
}

type stockBrand struct {
	stockBrandDo

	ALL              field.Asterisk
	ID               field.String // uuid
	TickerSymbol     field.String // 証券コード
	Name             field.String // 銘柄名
	MarketCode       field.String // 市場コード
	MarketName       field.String // 市場名
	Sector33Code     field.String // 33業種コード
	Sector33CodeName field.String // 33業種区分
	Sector17Code     field.String // 17業種コード
	Sector17CodeName field.String // 17業種区分
	CreatedAt        field.Time   // created_at
	UpdatedAt        field.Time   // updated_at
	DeletedAt        field.Field  // deleted_at

	fieldMap map[string]field.Expr
}

func (s stockBrand) Table(newTableName string) *stockBrand {
	s.stockBrandDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s stockBrand) As(alias string) *stockBrand {
	s.stockBrandDo.DO = *(s.stockBrandDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *stockBrand) updateTableName(table string) *stockBrand {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.TickerSymbol = field.NewString(table, "ticker_symbol")
	s.Name = field.NewString(table, "name")
	s.MarketCode = field.NewString(table, "market_code")
	s.MarketName = field.NewString(table, "market_name")
	s.Sector33Code = field.NewString(table, "sector_33_code")
	s.Sector33CodeName = field.NewString(table, "sector_33_code_name")
	s.Sector17Code = field.NewString(table, "sector_17_code")
	s.Sector17CodeName = field.NewString(table, "sector_17_code_name")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *stockBrand) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *stockBrand) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["id"] = s.ID
	s.fieldMap["ticker_symbol"] = s.TickerSymbol
	s.fieldMap["name"] = s.Name
	s.fieldMap["market_code"] = s.MarketCode
	s.fieldMap["market_name"] = s.MarketName
	s.fieldMap["sector_33_code"] = s.Sector33Code
	s.fieldMap["sector_33_code_name"] = s.Sector33CodeName
	s.fieldMap["sector_17_code"] = s.Sector17Code
	s.fieldMap["sector_17_code_name"] = s.Sector17CodeName
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s stockBrand) clone(db *gorm.DB) stockBrand {
	s.stockBrandDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s stockBrand) replaceDB(db *gorm.DB) stockBrand {
	s.stockBrandDo.ReplaceDB(db)
	return s
}

type stockBrandDo struct{ gen.DO }

type IStockBrandDo interface {
	gen.SubQuery
	Debug() IStockBrandDo
	WithContext(ctx context.Context) IStockBrandDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStockBrandDo
	WriteDB() IStockBrandDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStockBrandDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStockBrandDo
	Not(conds ...gen.Condition) IStockBrandDo
	Or(conds ...gen.Condition) IStockBrandDo
	Select(conds ...field.Expr) IStockBrandDo
	Where(conds ...gen.Condition) IStockBrandDo
	Order(conds ...field.Expr) IStockBrandDo
	Distinct(cols ...field.Expr) IStockBrandDo
	Omit(cols ...field.Expr) IStockBrandDo
	Join(table schema.Tabler, on ...field.Expr) IStockBrandDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStockBrandDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStockBrandDo
	Group(cols ...field.Expr) IStockBrandDo
	Having(conds ...gen.Condition) IStockBrandDo
	Limit(limit int) IStockBrandDo
	Offset(offset int) IStockBrandDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStockBrandDo
	Unscoped() IStockBrandDo
	Create(values ...*gen_model.StockBrand) error
	CreateInBatches(values []*gen_model.StockBrand, batchSize int) error
	Save(values ...*gen_model.StockBrand) error
	First() (*gen_model.StockBrand, error)
	Take() (*gen_model.StockBrand, error)
	Last() (*gen_model.StockBrand, error)
	Find() ([]*gen_model.StockBrand, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.StockBrand, err error)
	FindInBatches(result *[]*gen_model.StockBrand, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*gen_model.StockBrand) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStockBrandDo
	Assign(attrs ...field.AssignExpr) IStockBrandDo
	Joins(fields ...field.RelationField) IStockBrandDo
	Preload(fields ...field.RelationField) IStockBrandDo
	FirstOrInit() (*gen_model.StockBrand, error)
	FirstOrCreate() (*gen_model.StockBrand, error)
	FindByPage(offset int, limit int) (result []*gen_model.StockBrand, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStockBrandDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s stockBrandDo) Debug() IStockBrandDo {
	return s.withDO(s.DO.Debug())
}

func (s stockBrandDo) WithContext(ctx context.Context) IStockBrandDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s stockBrandDo) ReadDB() IStockBrandDo {
	return s.Clauses(dbresolver.Read)
}

func (s stockBrandDo) WriteDB() IStockBrandDo {
	return s.Clauses(dbresolver.Write)
}

func (s stockBrandDo) Session(config *gorm.Session) IStockBrandDo {
	return s.withDO(s.DO.Session(config))
}

func (s stockBrandDo) Clauses(conds ...clause.Expression) IStockBrandDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s stockBrandDo) Returning(value interface{}, columns ...string) IStockBrandDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s stockBrandDo) Not(conds ...gen.Condition) IStockBrandDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s stockBrandDo) Or(conds ...gen.Condition) IStockBrandDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s stockBrandDo) Select(conds ...field.Expr) IStockBrandDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s stockBrandDo) Where(conds ...gen.Condition) IStockBrandDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s stockBrandDo) Order(conds ...field.Expr) IStockBrandDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s stockBrandDo) Distinct(cols ...field.Expr) IStockBrandDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s stockBrandDo) Omit(cols ...field.Expr) IStockBrandDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s stockBrandDo) Join(table schema.Tabler, on ...field.Expr) IStockBrandDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s stockBrandDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStockBrandDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s stockBrandDo) RightJoin(table schema.Tabler, on ...field.Expr) IStockBrandDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s stockBrandDo) Group(cols ...field.Expr) IStockBrandDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s stockBrandDo) Having(conds ...gen.Condition) IStockBrandDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s stockBrandDo) Limit(limit int) IStockBrandDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s stockBrandDo) Offset(offset int) IStockBrandDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s stockBrandDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStockBrandDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s stockBrandDo) Unscoped() IStockBrandDo {
	return s.withDO(s.DO.Unscoped())
}

func (s stockBrandDo) Create(values ...*gen_model.StockBrand) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s stockBrandDo) CreateInBatches(values []*gen_model.StockBrand, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s stockBrandDo) Save(values ...*gen_model.StockBrand) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s stockBrandDo) First() (*gen_model.StockBrand, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.StockBrand), nil
	}
}

func (s stockBrandDo) Take() (*gen_model.StockBrand, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.StockBrand), nil
	}
}

func (s stockBrandDo) Last() (*gen_model.StockBrand, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.StockBrand), nil
	}
}

func (s stockBrandDo) Find() ([]*gen_model.StockBrand, error) {
	result, err := s.DO.Find()
	return result.([]*gen_model.StockBrand), err
}

func (s stockBrandDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.StockBrand, err error) {
	buf := make([]*gen_model.StockBrand, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s stockBrandDo) FindInBatches(result *[]*gen_model.StockBrand, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s stockBrandDo) Attrs(attrs ...field.AssignExpr) IStockBrandDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s stockBrandDo) Assign(attrs ...field.AssignExpr) IStockBrandDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s stockBrandDo) Joins(fields ...field.RelationField) IStockBrandDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s stockBrandDo) Preload(fields ...field.RelationField) IStockBrandDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s stockBrandDo) FirstOrInit() (*gen_model.StockBrand, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.StockBrand), nil
	}
}

func (s stockBrandDo) FirstOrCreate() (*gen_model.StockBrand, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.StockBrand), nil
	}
}

func (s stockBrandDo) FindByPage(offset int, limit int) (result []*gen_model.StockBrand, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s stockBrandDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s stockBrandDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s stockBrandDo) Delete(models ...*gen_model.StockBrand) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *stockBrandDo) withDO(do gen.Dao) *stockBrandDo {
	s.DO = *do.(*gen.DO)
	return s
}
