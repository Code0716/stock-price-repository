// Code generated by MockGen. DO NOT EDIT.
// Source: stock_brands_daily_stock_price_analyze.go
//
// Generated by this command:
//
//	mockgen -source=stock_brands_daily_stock_price_analyze.go -package=mock_repositories -destination=../mock/repositories/stock_brands_daily_stock_price_analyze.go
//

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	reflect "reflect"

	models "github.com/Code0716/stock-price-repository/models"
	gomock "go.uber.org/mock/gomock"
)

// MockStockBrandsDailyPriceForAnalyzeRepository is a mock of StockBrandsDailyPriceForAnalyzeRepository interface.
type MockStockBrandsDailyPriceForAnalyzeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStockBrandsDailyPriceForAnalyzeRepositoryMockRecorder
	isgomock struct{}
}

// MockStockBrandsDailyPriceForAnalyzeRepositoryMockRecorder is the mock recorder for MockStockBrandsDailyPriceForAnalyzeRepository.
type MockStockBrandsDailyPriceForAnalyzeRepositoryMockRecorder struct {
	mock *MockStockBrandsDailyPriceForAnalyzeRepository
}

// NewMockStockBrandsDailyPriceForAnalyzeRepository creates a new mock instance.
func NewMockStockBrandsDailyPriceForAnalyzeRepository(ctrl *gomock.Controller) *MockStockBrandsDailyPriceForAnalyzeRepository {
	mock := &MockStockBrandsDailyPriceForAnalyzeRepository{ctrl: ctrl}
	mock.recorder = &MockStockBrandsDailyPriceForAnalyzeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStockBrandsDailyPriceForAnalyzeRepository) EXPECT() *MockStockBrandsDailyPriceForAnalyzeRepositoryMockRecorder {
	return m.recorder
}

// CreateStockBrandDailyPriceForAnalyze mocks base method.
func (m *MockStockBrandsDailyPriceForAnalyzeRepository) CreateStockBrandDailyPriceForAnalyze(ctx context.Context, dailyPrice []*models.StockBrandDailyPriceForAnalyze) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStockBrandDailyPriceForAnalyze", ctx, dailyPrice)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStockBrandDailyPriceForAnalyze indicates an expected call of CreateStockBrandDailyPriceForAnalyze.
func (mr *MockStockBrandsDailyPriceForAnalyzeRepositoryMockRecorder) CreateStockBrandDailyPriceForAnalyze(ctx, dailyPrice any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStockBrandDailyPriceForAnalyze", reflect.TypeOf((*MockStockBrandsDailyPriceForAnalyzeRepository)(nil).CreateStockBrandDailyPriceForAnalyze), ctx, dailyPrice)
}

// DeleteBySymbols mocks base method.
func (m *MockStockBrandsDailyPriceForAnalyzeRepository) DeleteBySymbols(ctx context.Context, deleteSymbols []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBySymbols", ctx, deleteSymbols)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBySymbols indicates an expected call of DeleteBySymbols.
func (mr *MockStockBrandsDailyPriceForAnalyzeRepositoryMockRecorder) DeleteBySymbols(ctx, deleteSymbols any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBySymbols", reflect.TypeOf((*MockStockBrandsDailyPriceForAnalyzeRepository)(nil).DeleteBySymbols), ctx, deleteSymbols)
}
