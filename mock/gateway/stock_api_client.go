// Code generated by MockGen. DO NOT EDIT.
// Source: stock_api_client.go
//
// Generated by this command:
//
//	mockgen -source=stock_api_client.go -package=mock_gateway -destination=../../mock/gateway/stock_api_client.go
//

// Package mock_gateway is a generated GoMock package.
package mock_gateway

import (
	context "context"
	reflect "reflect"
	time "time"

	gateway "github.com/Code0716/stock-price-repository/infrastructure/gateway"
	gomock "go.uber.org/mock/gomock"
)

// MockStockAPIClient is a mock of StockAPIClient interface.
type MockStockAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockStockAPIClientMockRecorder
	isgomock struct{}
}

// MockStockAPIClientMockRecorder is the mock recorder for MockStockAPIClient.
type MockStockAPIClientMockRecorder struct {
	mock *MockStockAPIClient
}

// NewMockStockAPIClient creates a new mock instance.
func NewMockStockAPIClient(ctrl *gomock.Controller) *MockStockAPIClient {
	mock := &MockStockAPIClient{ctrl: ctrl}
	mock.recorder = &MockStockAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStockAPIClient) EXPECT() *MockStockAPIClientMockRecorder {
	return m.recorder
}

// GetAnnounceFinsSchedule mocks base method.
func (m *MockStockAPIClient) GetAnnounceFinsSchedule(ctx context.Context) ([]*gateway.AnnounceFinScheduleResponseInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnnounceFinsSchedule", ctx)
	ret0, _ := ret[0].([]*gateway.AnnounceFinScheduleResponseInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnnounceFinsSchedule indicates an expected call of GetAnnounceFinsSchedule.
func (mr *MockStockAPIClientMockRecorder) GetAnnounceFinsSchedule(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnnounceFinsSchedule", reflect.TypeOf((*MockStockAPIClient)(nil).GetAnnounceFinsSchedule), ctx)
}

// GetBalanceSheetsBySymbol mocks base method.
func (m *MockStockAPIClient) GetBalanceSheetsBySymbol(ctx context.Context, symbol string) (*gateway.BalanceSheetsInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceSheetsBySymbol", ctx, symbol)
	ret0, _ := ret[0].(*gateway.BalanceSheetsInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceSheetsBySymbol indicates an expected call of GetBalanceSheetsBySymbol.
func (mr *MockStockAPIClientMockRecorder) GetBalanceSheetsBySymbol(ctx, symbol any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceSheetsBySymbol", reflect.TypeOf((*MockStockAPIClient)(nil).GetBalanceSheetsBySymbol), ctx, symbol)
}

// GetCurrentStockPriceBySymbol mocks base method.
func (m *MockStockAPIClient) GetCurrentStockPriceBySymbol(ctx context.Context, symbol gateway.StockAPISymbol, date time.Time) ([]*gateway.StockPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentStockPriceBySymbol", ctx, symbol, date)
	ret0, _ := ret[0].([]*gateway.StockPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentStockPriceBySymbol indicates an expected call of GetCurrentStockPriceBySymbol.
func (mr *MockStockAPIClientMockRecorder) GetCurrentStockPriceBySymbol(ctx, symbol, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentStockPriceBySymbol", reflect.TypeOf((*MockStockAPIClient)(nil).GetCurrentStockPriceBySymbol), ctx, symbol, date)
}

// GetDailyPricesBySymbolAndRange mocks base method.
func (m *MockStockAPIClient) GetDailyPricesBySymbolAndRange(ctx context.Context, symbol gateway.StockAPISymbol, dateRange gateway.StockAPIValidRange) ([]*gateway.StockPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDailyPricesBySymbolAndRange", ctx, symbol, dateRange)
	ret0, _ := ret[0].([]*gateway.StockPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDailyPricesBySymbolAndRange indicates an expected call of GetDailyPricesBySymbolAndRange.
func (mr *MockStockAPIClientMockRecorder) GetDailyPricesBySymbolAndRange(ctx, symbol, dateRange any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDailyPricesBySymbolAndRange", reflect.TypeOf((*MockStockAPIClient)(nil).GetDailyPricesBySymbolAndRange), ctx, symbol, dateRange)
}

// GetFinancialStatementsByDate mocks base method.
func (m *MockStockAPIClient) GetFinancialStatementsByDate(ctx context.Context, date time.Time) ([]*gateway.FinancialStatementsResponseInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFinancialStatementsByDate", ctx, date)
	ret0, _ := ret[0].([]*gateway.FinancialStatementsResponseInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFinancialStatementsByDate indicates an expected call of GetFinancialStatementsByDate.
func (mr *MockStockAPIClientMockRecorder) GetFinancialStatementsByDate(ctx, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFinancialStatementsByDate", reflect.TypeOf((*MockStockAPIClient)(nil).GetFinancialStatementsByDate), ctx, date)
}

// GetFinancialStatementsBySymbol mocks base method.
func (m *MockStockAPIClient) GetFinancialStatementsBySymbol(ctx context.Context, symbol gateway.StockAPISymbol) ([]*gateway.FinancialStatementsResponseInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFinancialStatementsBySymbol", ctx, symbol)
	ret0, _ := ret[0].([]*gateway.FinancialStatementsResponseInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFinancialStatementsBySymbol indicates an expected call of GetFinancialStatementsBySymbol.
func (mr *MockStockAPIClientMockRecorder) GetFinancialStatementsBySymbol(ctx, symbol any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFinancialStatementsBySymbol", reflect.TypeOf((*MockStockAPIClient)(nil).GetFinancialStatementsBySymbol), ctx, symbol)
}

// GetIndexPriceChart mocks base method.
func (m *MockStockAPIClient) GetIndexPriceChart(ctx context.Context, symbol gateway.StockAPISymbol, interval gateway.StockAPIInterval, dateRange gateway.StockAPIValidRange) (*gateway.StockChartWithRangeAPIResponseInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndexPriceChart", ctx, symbol, interval, dateRange)
	ret0, _ := ret[0].(*gateway.StockChartWithRangeAPIResponseInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndexPriceChart indicates an expected call of GetIndexPriceChart.
func (mr *MockStockAPIClientMockRecorder) GetIndexPriceChart(ctx, symbol, interval, dateRange any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndexPriceChart", reflect.TypeOf((*MockStockAPIClient)(nil).GetIndexPriceChart), ctx, symbol, interval, dateRange)
}

// GetOrSetJQuantsAPIIDTokenToRedis mocks base method.
func (m *MockStockAPIClient) GetOrSetJQuantsAPIIDTokenToRedis(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrSetJQuantsAPIIDTokenToRedis", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrSetJQuantsAPIIDTokenToRedis indicates an expected call of GetOrSetJQuantsAPIIDTokenToRedis.
func (mr *MockStockAPIClientMockRecorder) GetOrSetJQuantsAPIIDTokenToRedis(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrSetJQuantsAPIIDTokenToRedis", reflect.TypeOf((*MockStockAPIClient)(nil).GetOrSetJQuantsAPIIDTokenToRedis), ctx)
}

// GetStockBrands mocks base method.
func (m *MockStockAPIClient) GetStockBrands(ctx context.Context) ([]*gateway.StockBrand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockBrands", ctx)
	ret0, _ := ret[0].([]*gateway.StockBrand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockBrands indicates an expected call of GetStockBrands.
func (mr *MockStockAPIClientMockRecorder) GetStockBrands(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockBrands", reflect.TypeOf((*MockStockAPIClient)(nil).GetStockBrands), ctx)
}

// GetStockPriceChart mocks base method.
func (m *MockStockAPIClient) GetStockPriceChart(ctx context.Context, symbol gateway.StockAPISymbol, interval gateway.StockAPIInterval, dateRange gateway.StockAPIValidRange) (*gateway.StockChartWithRangeAPIResponseInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockPriceChart", ctx, symbol, interval, dateRange)
	ret0, _ := ret[0].(*gateway.StockChartWithRangeAPIResponseInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockPriceChart indicates an expected call of GetStockPriceChart.
func (mr *MockStockAPIClientMockRecorder) GetStockPriceChart(ctx, symbol, interval, dateRange any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockPriceChart", reflect.TypeOf((*MockStockAPIClient)(nil).GetStockPriceChart), ctx, symbol, interval, dateRange)
}

// GetTradingCalendarsInfo mocks base method.
func (m *MockStockAPIClient) GetTradingCalendarsInfo(ctx context.Context, filter gateway.TradingCalendarsInfoFilter) ([]*gateway.TradingCalendarsInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTradingCalendarsInfo", ctx, filter)
	ret0, _ := ret[0].([]*gateway.TradingCalendarsInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTradingCalendarsInfo indicates an expected call of GetTradingCalendarsInfo.
func (mr *MockStockAPIClientMockRecorder) GetTradingCalendarsInfo(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTradingCalendarsInfo", reflect.TypeOf((*MockStockAPIClient)(nil).GetTradingCalendarsInfo), ctx, filter)
}

// GetWeeklyIndexPriceChart mocks base method.
func (m *MockStockAPIClient) GetWeeklyIndexPriceChart(ctx context.Context, symbol gateway.StockAPISymbol, dateRange gateway.StockAPIValidRange) (*gateway.StockChartWithRangeAPIResponseInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeeklyIndexPriceChart", ctx, symbol, dateRange)
	ret0, _ := ret[0].(*gateway.StockChartWithRangeAPIResponseInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeeklyIndexPriceChart indicates an expected call of GetWeeklyIndexPriceChart.
func (mr *MockStockAPIClientMockRecorder) GetWeeklyIndexPriceChart(ctx, symbol, dateRange any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeeklyIndexPriceChart", reflect.TypeOf((*MockStockAPIClient)(nil).GetWeeklyIndexPriceChart), ctx, symbol, dateRange)
}
