// Code generated by MockGen. DO NOT EDIT.
// Source: export_sql_interactor.go
//
// Generated by this command:
//
//	mockgen -source=export_sql_interactor.go -package=mock_usecase -destination=../mock/usecase/export_sql_interactor.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockExportSQLInteractor is a mock of ExportSQLInteractor interface.
type MockExportSQLInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockExportSQLInteractorMockRecorder
	isgomock struct{}
}

// MockExportSQLInteractorMockRecorder is the mock recorder for MockExportSQLInteractor.
type MockExportSQLInteractorMockRecorder struct {
	mock *MockExportSQLInteractor
}

// NewMockExportSQLInteractor creates a new mock instance.
func NewMockExportSQLInteractor(ctrl *gomock.Controller) *MockExportSQLInteractor {
	mock := &MockExportSQLInteractor{ctrl: ctrl}
	mock.recorder = &MockExportSQLInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExportSQLInteractor) EXPECT() *MockExportSQLInteractorMockRecorder {
	return m.recorder
}

// ExportSQLFiles mocks base method.
func (m *MockExportSQLInteractor) ExportSQLFiles(ctx context.Context, t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportSQLFiles", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExportSQLFiles indicates an expected call of ExportSQLFiles.
func (mr *MockExportSQLInteractorMockRecorder) ExportSQLFiles(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportSQLFiles", reflect.TypeOf((*MockExportSQLInteractor)(nil).ExportSQLFiles), ctx, t)
}
