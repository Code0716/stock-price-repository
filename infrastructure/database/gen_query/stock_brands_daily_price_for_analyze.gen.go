// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen_query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Code0716/stock-price-repository/infrastructure/database/gen_model"
)

func newStockBrandsDailyPriceForAnalyze(db *gorm.DB, opts ...gen.DOOption) stockBrandsDailyPriceForAnalyze {
	_stockBrandsDailyPriceForAnalyze := stockBrandsDailyPriceForAnalyze{}

	_stockBrandsDailyPriceForAnalyze.stockBrandsDailyPriceForAnalyzeDo.UseDB(db, opts...)
	_stockBrandsDailyPriceForAnalyze.stockBrandsDailyPriceForAnalyzeDo.UseModel(&gen_model.StockBrandsDailyPriceForAnalyze{})

	tableName := _stockBrandsDailyPriceForAnalyze.stockBrandsDailyPriceForAnalyzeDo.TableName()
	_stockBrandsDailyPriceForAnalyze.ALL = field.NewAsterisk(tableName)
	_stockBrandsDailyPriceForAnalyze.ID = field.NewString(tableName, "id")
	_stockBrandsDailyPriceForAnalyze.TickerSymbol = field.NewString(tableName, "ticker_symbol")
	_stockBrandsDailyPriceForAnalyze.Date = field.NewTime(tableName, "date")
	_stockBrandsDailyPriceForAnalyze.OpenPrice = field.NewFloat64(tableName, "open_price")
	_stockBrandsDailyPriceForAnalyze.ClosePrice = field.NewFloat64(tableName, "close_price")
	_stockBrandsDailyPriceForAnalyze.HighPrice = field.NewFloat64(tableName, "high_price")
	_stockBrandsDailyPriceForAnalyze.LowPrice = field.NewFloat64(tableName, "low_price")
	_stockBrandsDailyPriceForAnalyze.AdjClosePrice = field.NewFloat64(tableName, "adj_close_price")
	_stockBrandsDailyPriceForAnalyze.Volume = field.NewUint64(tableName, "volume")
	_stockBrandsDailyPriceForAnalyze.CreatedAt = field.NewTime(tableName, "created_at")
	_stockBrandsDailyPriceForAnalyze.UpdatedAt = field.NewTime(tableName, "updated_at")

	_stockBrandsDailyPriceForAnalyze.fillFieldMap()

	return _stockBrandsDailyPriceForAnalyze
}

type stockBrandsDailyPriceForAnalyze struct {
	stockBrandsDailyPriceForAnalyzeDo

	ALL           field.Asterisk
	ID            field.String  // uuid
	TickerSymbol  field.String  // ticker symbol
	Date          field.Time    // date
	OpenPrice     field.Float64 // 始値
	ClosePrice    field.Float64 // 終値
	HighPrice     field.Float64 // 高値
	LowPrice      field.Float64 // 安値
	AdjClosePrice field.Float64 // 配当や株式分割を考慮した終値
	Volume        field.Uint64  // 出来高
	CreatedAt     field.Time    // created_at
	UpdatedAt     field.Time    // updated_at

	fieldMap map[string]field.Expr
}

func (s stockBrandsDailyPriceForAnalyze) Table(newTableName string) *stockBrandsDailyPriceForAnalyze {
	s.stockBrandsDailyPriceForAnalyzeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s stockBrandsDailyPriceForAnalyze) As(alias string) *stockBrandsDailyPriceForAnalyze {
	s.stockBrandsDailyPriceForAnalyzeDo.DO = *(s.stockBrandsDailyPriceForAnalyzeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *stockBrandsDailyPriceForAnalyze) updateTableName(table string) *stockBrandsDailyPriceForAnalyze {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.TickerSymbol = field.NewString(table, "ticker_symbol")
	s.Date = field.NewTime(table, "date")
	s.OpenPrice = field.NewFloat64(table, "open_price")
	s.ClosePrice = field.NewFloat64(table, "close_price")
	s.HighPrice = field.NewFloat64(table, "high_price")
	s.LowPrice = field.NewFloat64(table, "low_price")
	s.AdjClosePrice = field.NewFloat64(table, "adj_close_price")
	s.Volume = field.NewUint64(table, "volume")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *stockBrandsDailyPriceForAnalyze) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *stockBrandsDailyPriceForAnalyze) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["ticker_symbol"] = s.TickerSymbol
	s.fieldMap["date"] = s.Date
	s.fieldMap["open_price"] = s.OpenPrice
	s.fieldMap["close_price"] = s.ClosePrice
	s.fieldMap["high_price"] = s.HighPrice
	s.fieldMap["low_price"] = s.LowPrice
	s.fieldMap["adj_close_price"] = s.AdjClosePrice
	s.fieldMap["volume"] = s.Volume
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s stockBrandsDailyPriceForAnalyze) clone(db *gorm.DB) stockBrandsDailyPriceForAnalyze {
	s.stockBrandsDailyPriceForAnalyzeDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s stockBrandsDailyPriceForAnalyze) replaceDB(db *gorm.DB) stockBrandsDailyPriceForAnalyze {
	s.stockBrandsDailyPriceForAnalyzeDo.ReplaceDB(db)
	return s
}

type stockBrandsDailyPriceForAnalyzeDo struct{ gen.DO }

type IStockBrandsDailyPriceForAnalyzeDo interface {
	gen.SubQuery
	Debug() IStockBrandsDailyPriceForAnalyzeDo
	WithContext(ctx context.Context) IStockBrandsDailyPriceForAnalyzeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStockBrandsDailyPriceForAnalyzeDo
	WriteDB() IStockBrandsDailyPriceForAnalyzeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStockBrandsDailyPriceForAnalyzeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStockBrandsDailyPriceForAnalyzeDo
	Not(conds ...gen.Condition) IStockBrandsDailyPriceForAnalyzeDo
	Or(conds ...gen.Condition) IStockBrandsDailyPriceForAnalyzeDo
	Select(conds ...field.Expr) IStockBrandsDailyPriceForAnalyzeDo
	Where(conds ...gen.Condition) IStockBrandsDailyPriceForAnalyzeDo
	Order(conds ...field.Expr) IStockBrandsDailyPriceForAnalyzeDo
	Distinct(cols ...field.Expr) IStockBrandsDailyPriceForAnalyzeDo
	Omit(cols ...field.Expr) IStockBrandsDailyPriceForAnalyzeDo
	Join(table schema.Tabler, on ...field.Expr) IStockBrandsDailyPriceForAnalyzeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStockBrandsDailyPriceForAnalyzeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStockBrandsDailyPriceForAnalyzeDo
	Group(cols ...field.Expr) IStockBrandsDailyPriceForAnalyzeDo
	Having(conds ...gen.Condition) IStockBrandsDailyPriceForAnalyzeDo
	Limit(limit int) IStockBrandsDailyPriceForAnalyzeDo
	Offset(offset int) IStockBrandsDailyPriceForAnalyzeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStockBrandsDailyPriceForAnalyzeDo
	Unscoped() IStockBrandsDailyPriceForAnalyzeDo
	Create(values ...*gen_model.StockBrandsDailyPriceForAnalyze) error
	CreateInBatches(values []*gen_model.StockBrandsDailyPriceForAnalyze, batchSize int) error
	Save(values ...*gen_model.StockBrandsDailyPriceForAnalyze) error
	First() (*gen_model.StockBrandsDailyPriceForAnalyze, error)
	Take() (*gen_model.StockBrandsDailyPriceForAnalyze, error)
	Last() (*gen_model.StockBrandsDailyPriceForAnalyze, error)
	Find() ([]*gen_model.StockBrandsDailyPriceForAnalyze, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.StockBrandsDailyPriceForAnalyze, err error)
	FindInBatches(result *[]*gen_model.StockBrandsDailyPriceForAnalyze, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*gen_model.StockBrandsDailyPriceForAnalyze) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStockBrandsDailyPriceForAnalyzeDo
	Assign(attrs ...field.AssignExpr) IStockBrandsDailyPriceForAnalyzeDo
	Joins(fields ...field.RelationField) IStockBrandsDailyPriceForAnalyzeDo
	Preload(fields ...field.RelationField) IStockBrandsDailyPriceForAnalyzeDo
	FirstOrInit() (*gen_model.StockBrandsDailyPriceForAnalyze, error)
	FirstOrCreate() (*gen_model.StockBrandsDailyPriceForAnalyze, error)
	FindByPage(offset int, limit int) (result []*gen_model.StockBrandsDailyPriceForAnalyze, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStockBrandsDailyPriceForAnalyzeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s stockBrandsDailyPriceForAnalyzeDo) Debug() IStockBrandsDailyPriceForAnalyzeDo {
	return s.withDO(s.DO.Debug())
}

func (s stockBrandsDailyPriceForAnalyzeDo) WithContext(ctx context.Context) IStockBrandsDailyPriceForAnalyzeDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s stockBrandsDailyPriceForAnalyzeDo) ReadDB() IStockBrandsDailyPriceForAnalyzeDo {
	return s.Clauses(dbresolver.Read)
}

func (s stockBrandsDailyPriceForAnalyzeDo) WriteDB() IStockBrandsDailyPriceForAnalyzeDo {
	return s.Clauses(dbresolver.Write)
}

func (s stockBrandsDailyPriceForAnalyzeDo) Session(config *gorm.Session) IStockBrandsDailyPriceForAnalyzeDo {
	return s.withDO(s.DO.Session(config))
}

func (s stockBrandsDailyPriceForAnalyzeDo) Clauses(conds ...clause.Expression) IStockBrandsDailyPriceForAnalyzeDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s stockBrandsDailyPriceForAnalyzeDo) Returning(value interface{}, columns ...string) IStockBrandsDailyPriceForAnalyzeDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s stockBrandsDailyPriceForAnalyzeDo) Not(conds ...gen.Condition) IStockBrandsDailyPriceForAnalyzeDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s stockBrandsDailyPriceForAnalyzeDo) Or(conds ...gen.Condition) IStockBrandsDailyPriceForAnalyzeDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s stockBrandsDailyPriceForAnalyzeDo) Select(conds ...field.Expr) IStockBrandsDailyPriceForAnalyzeDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s stockBrandsDailyPriceForAnalyzeDo) Where(conds ...gen.Condition) IStockBrandsDailyPriceForAnalyzeDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s stockBrandsDailyPriceForAnalyzeDo) Order(conds ...field.Expr) IStockBrandsDailyPriceForAnalyzeDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s stockBrandsDailyPriceForAnalyzeDo) Distinct(cols ...field.Expr) IStockBrandsDailyPriceForAnalyzeDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s stockBrandsDailyPriceForAnalyzeDo) Omit(cols ...field.Expr) IStockBrandsDailyPriceForAnalyzeDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s stockBrandsDailyPriceForAnalyzeDo) Join(table schema.Tabler, on ...field.Expr) IStockBrandsDailyPriceForAnalyzeDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s stockBrandsDailyPriceForAnalyzeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStockBrandsDailyPriceForAnalyzeDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s stockBrandsDailyPriceForAnalyzeDo) RightJoin(table schema.Tabler, on ...field.Expr) IStockBrandsDailyPriceForAnalyzeDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s stockBrandsDailyPriceForAnalyzeDo) Group(cols ...field.Expr) IStockBrandsDailyPriceForAnalyzeDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s stockBrandsDailyPriceForAnalyzeDo) Having(conds ...gen.Condition) IStockBrandsDailyPriceForAnalyzeDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s stockBrandsDailyPriceForAnalyzeDo) Limit(limit int) IStockBrandsDailyPriceForAnalyzeDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s stockBrandsDailyPriceForAnalyzeDo) Offset(offset int) IStockBrandsDailyPriceForAnalyzeDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s stockBrandsDailyPriceForAnalyzeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStockBrandsDailyPriceForAnalyzeDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s stockBrandsDailyPriceForAnalyzeDo) Unscoped() IStockBrandsDailyPriceForAnalyzeDo {
	return s.withDO(s.DO.Unscoped())
}

func (s stockBrandsDailyPriceForAnalyzeDo) Create(values ...*gen_model.StockBrandsDailyPriceForAnalyze) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s stockBrandsDailyPriceForAnalyzeDo) CreateInBatches(values []*gen_model.StockBrandsDailyPriceForAnalyze, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s stockBrandsDailyPriceForAnalyzeDo) Save(values ...*gen_model.StockBrandsDailyPriceForAnalyze) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s stockBrandsDailyPriceForAnalyzeDo) First() (*gen_model.StockBrandsDailyPriceForAnalyze, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.StockBrandsDailyPriceForAnalyze), nil
	}
}

func (s stockBrandsDailyPriceForAnalyzeDo) Take() (*gen_model.StockBrandsDailyPriceForAnalyze, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.StockBrandsDailyPriceForAnalyze), nil
	}
}

func (s stockBrandsDailyPriceForAnalyzeDo) Last() (*gen_model.StockBrandsDailyPriceForAnalyze, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.StockBrandsDailyPriceForAnalyze), nil
	}
}

func (s stockBrandsDailyPriceForAnalyzeDo) Find() ([]*gen_model.StockBrandsDailyPriceForAnalyze, error) {
	result, err := s.DO.Find()
	return result.([]*gen_model.StockBrandsDailyPriceForAnalyze), err
}

func (s stockBrandsDailyPriceForAnalyzeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.StockBrandsDailyPriceForAnalyze, err error) {
	buf := make([]*gen_model.StockBrandsDailyPriceForAnalyze, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s stockBrandsDailyPriceForAnalyzeDo) FindInBatches(result *[]*gen_model.StockBrandsDailyPriceForAnalyze, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s stockBrandsDailyPriceForAnalyzeDo) Attrs(attrs ...field.AssignExpr) IStockBrandsDailyPriceForAnalyzeDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s stockBrandsDailyPriceForAnalyzeDo) Assign(attrs ...field.AssignExpr) IStockBrandsDailyPriceForAnalyzeDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s stockBrandsDailyPriceForAnalyzeDo) Joins(fields ...field.RelationField) IStockBrandsDailyPriceForAnalyzeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s stockBrandsDailyPriceForAnalyzeDo) Preload(fields ...field.RelationField) IStockBrandsDailyPriceForAnalyzeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s stockBrandsDailyPriceForAnalyzeDo) FirstOrInit() (*gen_model.StockBrandsDailyPriceForAnalyze, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.StockBrandsDailyPriceForAnalyze), nil
	}
}

func (s stockBrandsDailyPriceForAnalyzeDo) FirstOrCreate() (*gen_model.StockBrandsDailyPriceForAnalyze, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.StockBrandsDailyPriceForAnalyze), nil
	}
}

func (s stockBrandsDailyPriceForAnalyzeDo) FindByPage(offset int, limit int) (result []*gen_model.StockBrandsDailyPriceForAnalyze, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s stockBrandsDailyPriceForAnalyzeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s stockBrandsDailyPriceForAnalyzeDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s stockBrandsDailyPriceForAnalyzeDo) Delete(models ...*gen_model.StockBrandsDailyPriceForAnalyze) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *stockBrandsDailyPriceForAnalyzeDo) withDO(do gen.Dao) *stockBrandsDailyPriceForAnalyzeDo {
	s.DO = *do.(*gen.DO)
	return s
}
