// Code generated by MockGen. DO NOT EDIT.
// Source: stock_brand.go
//
// Generated by this command:
//
//	mockgen -source=stock_brand.go -package=mock_repositories -destination=../mock/repositories/stock_brand.go
//

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/Code0716/stock-price-repository/models"
	gomock "go.uber.org/mock/gomock"
)

// MockStockBrandRepository is a mock of StockBrandRepository interface.
type MockStockBrandRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStockBrandRepositoryMockRecorder
	isgomock struct{}
}

// MockStockBrandRepositoryMockRecorder is the mock recorder for MockStockBrandRepository.
type MockStockBrandRepositoryMockRecorder struct {
	mock *MockStockBrandRepository
}

// NewMockStockBrandRepository creates a new mock instance.
func NewMockStockBrandRepository(ctrl *gomock.Controller) *MockStockBrandRepository {
	mock := &MockStockBrandRepository{ctrl: ctrl}
	mock.recorder = &MockStockBrandRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStockBrandRepository) EXPECT() *MockStockBrandRepositoryMockRecorder {
	return m.recorder
}

// DeleteDelistingStockBrands mocks base method.
func (m *MockStockBrandRepository) DeleteDelistingStockBrands(ctx context.Context, deleteSymbols []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDelistingStockBrands", ctx, deleteSymbols)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDelistingStockBrands indicates an expected call of DeleteDelistingStockBrands.
func (mr *MockStockBrandRepositoryMockRecorder) DeleteDelistingStockBrands(ctx, deleteSymbols any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDelistingStockBrands", reflect.TypeOf((*MockStockBrandRepository)(nil).DeleteDelistingStockBrands), ctx, deleteSymbols)
}

// FindAll mocks base method.
func (m *MockStockBrandRepository) FindAll(ctx context.Context) ([]*models.StockBrand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]*models.StockBrand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockStockBrandRepositoryMockRecorder) FindAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockStockBrandRepository)(nil).FindAll), ctx)
}

// FindDelistingStockBrandsFromUpdateTime mocks base method.
func (m *MockStockBrandRepository) FindDelistingStockBrandsFromUpdateTime(ctx context.Context, now time.Time) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDelistingStockBrandsFromUpdateTime", ctx, now)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDelistingStockBrandsFromUpdateTime indicates an expected call of FindDelistingStockBrandsFromUpdateTime.
func (mr *MockStockBrandRepositoryMockRecorder) FindDelistingStockBrandsFromUpdateTime(ctx, now any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDelistingStockBrandsFromUpdateTime", reflect.TypeOf((*MockStockBrandRepository)(nil).FindDelistingStockBrandsFromUpdateTime), ctx, now)
}

// FindFromSymbol mocks base method.
func (m *MockStockBrandRepository) FindFromSymbol(ctx context.Context, symbolFrom string, limit int) ([]*models.StockBrand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFromSymbol", ctx, symbolFrom, limit)
	ret0, _ := ret[0].([]*models.StockBrand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFromSymbol indicates an expected call of FindFromSymbol.
func (mr *MockStockBrandRepositoryMockRecorder) FindFromSymbol(ctx, symbolFrom, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFromSymbol", reflect.TypeOf((*MockStockBrandRepository)(nil).FindFromSymbol), ctx, symbolFrom, limit)
}

// UpsertStockBrands mocks base method.
func (m *MockStockBrandRepository) UpsertStockBrands(ctx context.Context, stockBrands []*models.StockBrand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertStockBrands", ctx, stockBrands)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertStockBrands indicates an expected call of UpsertStockBrands.
func (mr *MockStockBrandRepositoryMockRecorder) UpsertStockBrands(ctx, stockBrands any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertStockBrands", reflect.TypeOf((*MockStockBrandRepository)(nil).UpsertStockBrands), ctx, stockBrands)
}
