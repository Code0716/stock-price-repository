// Code generated by MockGen. DO NOT EDIT.
// Source: stock_brands_interactor.go
//
// Generated by this command:
//
//	mockgen -source=stock_brands_interactor.go -package=mock_usecase -destination=../mock/usecase/stock_brands_interactor.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockStockBrandInteractor is a mock of StockBrandInteractor interface.
type MockStockBrandInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockStockBrandInteractorMockRecorder
	isgomock struct{}
}

// MockStockBrandInteractorMockRecorder is the mock recorder for MockStockBrandInteractor.
type MockStockBrandInteractorMockRecorder struct {
	mock *MockStockBrandInteractor
}

// NewMockStockBrandInteractor creates a new mock instance.
func NewMockStockBrandInteractor(ctrl *gomock.Controller) *MockStockBrandInteractor {
	mock := &MockStockBrandInteractor{ctrl: ctrl}
	mock.recorder = &MockStockBrandInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStockBrandInteractor) EXPECT() *MockStockBrandInteractorMockRecorder {
	return m.recorder
}

// UpdateStockBrands mocks base method.
func (m *MockStockBrandInteractor) UpdateStockBrands(ctx context.Context, t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStockBrands", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStockBrands indicates an expected call of UpdateStockBrands.
func (mr *MockStockBrandInteractorMockRecorder) UpdateStockBrands(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStockBrands", reflect.TypeOf((*MockStockBrandInteractor)(nil).UpdateStockBrands), ctx, t)
}
