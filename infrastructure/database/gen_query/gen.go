// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen_query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                              = new(Query)
	AnalyzeStockBrandPriceHistory  *analyzeStockBrandPriceHistory
	DjiStockAverageDailyStockPrice *djiStockAverageDailyStockPrice
	HighVolumeStockBrand           *highVolumeStockBrand
	NikkeiStockAverageDailyPrice   *nikkeiStockAverageDailyPrice
	Sector17AverageDailyPrice      *sector17AverageDailyPrice
	Sector33AverageDailyPrice      *sector33AverageDailyPrice
	StockBrand                     *stockBrand
	StockBrandsDailyPrice          *stockBrandsDailyPrice
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	AnalyzeStockBrandPriceHistory = &Q.AnalyzeStockBrandPriceHistory
	DjiStockAverageDailyStockPrice = &Q.DjiStockAverageDailyStockPrice
	HighVolumeStockBrand = &Q.HighVolumeStockBrand
	NikkeiStockAverageDailyPrice = &Q.NikkeiStockAverageDailyPrice
	Sector17AverageDailyPrice = &Q.Sector17AverageDailyPrice
	Sector33AverageDailyPrice = &Q.Sector33AverageDailyPrice
	StockBrand = &Q.StockBrand
	StockBrandsDailyPrice = &Q.StockBrandsDailyPrice
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                             db,
		AnalyzeStockBrandPriceHistory:  newAnalyzeStockBrandPriceHistory(db, opts...),
		DjiStockAverageDailyStockPrice: newDjiStockAverageDailyStockPrice(db, opts...),
		HighVolumeStockBrand:           newHighVolumeStockBrand(db, opts...),
		NikkeiStockAverageDailyPrice:   newNikkeiStockAverageDailyPrice(db, opts...),
		Sector17AverageDailyPrice:      newSector17AverageDailyPrice(db, opts...),
		Sector33AverageDailyPrice:      newSector33AverageDailyPrice(db, opts...),
		StockBrand:                     newStockBrand(db, opts...),
		StockBrandsDailyPrice:          newStockBrandsDailyPrice(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	AnalyzeStockBrandPriceHistory  analyzeStockBrandPriceHistory
	DjiStockAverageDailyStockPrice djiStockAverageDailyStockPrice
	HighVolumeStockBrand           highVolumeStockBrand
	NikkeiStockAverageDailyPrice   nikkeiStockAverageDailyPrice
	Sector17AverageDailyPrice      sector17AverageDailyPrice
	Sector33AverageDailyPrice      sector33AverageDailyPrice
	StockBrand                     stockBrand
	StockBrandsDailyPrice          stockBrandsDailyPrice
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                             db,
		AnalyzeStockBrandPriceHistory:  q.AnalyzeStockBrandPriceHistory.clone(db),
		DjiStockAverageDailyStockPrice: q.DjiStockAverageDailyStockPrice.clone(db),
		HighVolumeStockBrand:           q.HighVolumeStockBrand.clone(db),
		NikkeiStockAverageDailyPrice:   q.NikkeiStockAverageDailyPrice.clone(db),
		Sector17AverageDailyPrice:      q.Sector17AverageDailyPrice.clone(db),
		Sector33AverageDailyPrice:      q.Sector33AverageDailyPrice.clone(db),
		StockBrand:                     q.StockBrand.clone(db),
		StockBrandsDailyPrice:          q.StockBrandsDailyPrice.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                             db,
		AnalyzeStockBrandPriceHistory:  q.AnalyzeStockBrandPriceHistory.replaceDB(db),
		DjiStockAverageDailyStockPrice: q.DjiStockAverageDailyStockPrice.replaceDB(db),
		HighVolumeStockBrand:           q.HighVolumeStockBrand.replaceDB(db),
		NikkeiStockAverageDailyPrice:   q.NikkeiStockAverageDailyPrice.replaceDB(db),
		Sector17AverageDailyPrice:      q.Sector17AverageDailyPrice.replaceDB(db),
		Sector33AverageDailyPrice:      q.Sector33AverageDailyPrice.replaceDB(db),
		StockBrand:                     q.StockBrand.replaceDB(db),
		StockBrandsDailyPrice:          q.StockBrandsDailyPrice.replaceDB(db),
	}
}

type queryCtx struct {
	AnalyzeStockBrandPriceHistory  IAnalyzeStockBrandPriceHistoryDo
	DjiStockAverageDailyStockPrice IDjiStockAverageDailyStockPriceDo
	HighVolumeStockBrand           IHighVolumeStockBrandDo
	NikkeiStockAverageDailyPrice   INikkeiStockAverageDailyPriceDo
	Sector17AverageDailyPrice      ISector17AverageDailyPriceDo
	Sector33AverageDailyPrice      ISector33AverageDailyPriceDo
	StockBrand                     IStockBrandDo
	StockBrandsDailyPrice          IStockBrandsDailyPriceDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		AnalyzeStockBrandPriceHistory:  q.AnalyzeStockBrandPriceHistory.WithContext(ctx),
		DjiStockAverageDailyStockPrice: q.DjiStockAverageDailyStockPrice.WithContext(ctx),
		HighVolumeStockBrand:           q.HighVolumeStockBrand.WithContext(ctx),
		NikkeiStockAverageDailyPrice:   q.NikkeiStockAverageDailyPrice.WithContext(ctx),
		Sector17AverageDailyPrice:      q.Sector17AverageDailyPrice.WithContext(ctx),
		Sector33AverageDailyPrice:      q.Sector33AverageDailyPrice.WithContext(ctx),
		StockBrand:                     q.StockBrand.WithContext(ctx),
		StockBrandsDailyPrice:          q.StockBrandsDailyPrice.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
