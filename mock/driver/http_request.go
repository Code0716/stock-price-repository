// Code generated by MockGen. DO NOT EDIT.
// Source: http_request.go
//
// Generated by this command:
//
//	mockgen -source=http_request.go -package=mock_driver -destination=../mock/driver/http_request.go
//

// Package mock_driver is a generated GoMock package.
package mock_driver

import (
	context "context"
	http "net/http"
	url "net/url"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHTTPRequest is a mock of HTTPRequest interface.
type MockHTTPRequest struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPRequestMockRecorder
	isgomock struct{}
}

// MockHTTPRequestMockRecorder is the mock recorder for MockHTTPRequest.
type MockHTTPRequestMockRecorder struct {
	mock *MockHTTPRequest
}

// NewMockHTTPRequest creates a new mock instance.
func NewMockHTTPRequest(ctrl *gomock.Controller) *MockHTTPRequest {
	mock := &MockHTTPRequest{ctrl: ctrl}
	mock.recorder = &MockHTTPRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPRequest) EXPECT() *MockHTTPRequestMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockHTTPRequest) Get(ctx context.Context, arg1 string, values *url.Values) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, arg1, values)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHTTPRequestMockRecorder) Get(ctx, arg1, values any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHTTPRequest)(nil).Get), ctx, arg1, values)
}

// GetHttpClient mocks base method.
func (m *MockHTTPRequest) GetHttpClient() *http.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHttpClient")
	ret0, _ := ret[0].(*http.Client)
	return ret0
}

// GetHttpClient indicates an expected call of GetHttpClient.
func (mr *MockHTTPRequestMockRecorder) GetHttpClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHttpClient", reflect.TypeOf((*MockHTTPRequest)(nil).GetHttpClient))
}

// Post mocks base method.
func (m *MockHTTPRequest) Post(ctx context.Context, arg1 string, values url.Values) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", ctx, arg1, values)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockHTTPRequestMockRecorder) Post(ctx, arg1, values any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockHTTPRequest)(nil).Post), ctx, arg1, values)
}
