// Code generated by MockGen. DO NOT EDIT.
// Source: analyze_stock_brand_price_history.go
//
// Generated by this command:
//
//	mockgen -source=analyze_stock_brand_price_history.go -package=mock_repositories -destination=../mock/repositories/analyze_stock_brand_price_history.go
//

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	reflect "reflect"

	models "github.com/Code0716/stock-price-repository/models"
	gomock "go.uber.org/mock/gomock"
)

// MockAnalyzeStockBrandPriceHistoryRepository is a mock of AnalyzeStockBrandPriceHistoryRepository interface.
type MockAnalyzeStockBrandPriceHistoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAnalyzeStockBrandPriceHistoryRepositoryMockRecorder
	isgomock struct{}
}

// MockAnalyzeStockBrandPriceHistoryRepositoryMockRecorder is the mock recorder for MockAnalyzeStockBrandPriceHistoryRepository.
type MockAnalyzeStockBrandPriceHistoryRepositoryMockRecorder struct {
	mock *MockAnalyzeStockBrandPriceHistoryRepository
}

// NewMockAnalyzeStockBrandPriceHistoryRepository creates a new mock instance.
func NewMockAnalyzeStockBrandPriceHistoryRepository(ctrl *gomock.Controller) *MockAnalyzeStockBrandPriceHistoryRepository {
	mock := &MockAnalyzeStockBrandPriceHistoryRepository{ctrl: ctrl}
	mock.recorder = &MockAnalyzeStockBrandPriceHistoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnalyzeStockBrandPriceHistoryRepository) EXPECT() *MockAnalyzeStockBrandPriceHistoryRepositoryMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockAnalyzeStockBrandPriceHistoryRepository) CreateOrUpdate(ctx context.Context, histories []*models.AnalyzeStockBrandPriceHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, histories)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockAnalyzeStockBrandPriceHistoryRepositoryMockRecorder) CreateOrUpdate(ctx, histories any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockAnalyzeStockBrandPriceHistoryRepository)(nil).CreateOrUpdate), ctx, histories)
}

// DeleteByStockBrandIDs mocks base method.
func (m *MockAnalyzeStockBrandPriceHistoryRepository) DeleteByStockBrandIDs(ctx context.Context, ids []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByStockBrandIDs", ctx, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByStockBrandIDs indicates an expected call of DeleteByStockBrandIDs.
func (mr *MockAnalyzeStockBrandPriceHistoryRepositoryMockRecorder) DeleteByStockBrandIDs(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByStockBrandIDs", reflect.TypeOf((*MockAnalyzeStockBrandPriceHistoryRepository)(nil).DeleteByStockBrandIDs), ctx, ids)
}
