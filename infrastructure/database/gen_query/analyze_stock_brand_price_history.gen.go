// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen_query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Code0716/stock-price-repository/infrastructure/database/gen_model"
)

func newAnalyzeStockBrandPriceHistory(db *gorm.DB, opts ...gen.DOOption) analyzeStockBrandPriceHistory {
	_analyzeStockBrandPriceHistory := analyzeStockBrandPriceHistory{}

	_analyzeStockBrandPriceHistory.analyzeStockBrandPriceHistoryDo.UseDB(db, opts...)
	_analyzeStockBrandPriceHistory.analyzeStockBrandPriceHistoryDo.UseModel(&gen_model.AnalyzeStockBrandPriceHistory{})

	tableName := _analyzeStockBrandPriceHistory.analyzeStockBrandPriceHistoryDo.TableName()
	_analyzeStockBrandPriceHistory.ALL = field.NewAsterisk(tableName)
	_analyzeStockBrandPriceHistory.ID = field.NewString(tableName, "id")
	_analyzeStockBrandPriceHistory.StockBrandID = field.NewString(tableName, "stock_brand_id")
	_analyzeStockBrandPriceHistory.TickerSymbol = field.NewString(tableName, "ticker_symbol")
	_analyzeStockBrandPriceHistory.TradePrice = field.NewFloat64(tableName, "trade_price")
	_analyzeStockBrandPriceHistory.CurrentPrice = field.NewFloat64(tableName, "current_price")
	_analyzeStockBrandPriceHistory.Action = field.NewString(tableName, "action")
	_analyzeStockBrandPriceHistory.Method = field.NewString(tableName, "method")
	_analyzeStockBrandPriceHistory.Memo = field.NewString(tableName, "memo")
	_analyzeStockBrandPriceHistory.CreatedAt = field.NewTime(tableName, "created_at")

	_analyzeStockBrandPriceHistory.fillFieldMap()

	return _analyzeStockBrandPriceHistory
}

type analyzeStockBrandPriceHistory struct {
	analyzeStockBrandPriceHistoryDo

	ALL          field.Asterisk
	ID           field.String  // uuid
	StockBrandID field.String  // uuid
	TickerSymbol field.String  // 証券コード
	TradePrice   field.Float64 // トレード金額
	CurrentPrice field.Float64 // 現在値
	Action       field.String  // 売り/買いの別
	Method       field.String  // 分析方法
	Memo         field.String  // メモ
	CreatedAt    field.Time

	fieldMap map[string]field.Expr
}

func (a analyzeStockBrandPriceHistory) Table(newTableName string) *analyzeStockBrandPriceHistory {
	a.analyzeStockBrandPriceHistoryDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a analyzeStockBrandPriceHistory) As(alias string) *analyzeStockBrandPriceHistory {
	a.analyzeStockBrandPriceHistoryDo.DO = *(a.analyzeStockBrandPriceHistoryDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *analyzeStockBrandPriceHistory) updateTableName(table string) *analyzeStockBrandPriceHistory {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "id")
	a.StockBrandID = field.NewString(table, "stock_brand_id")
	a.TickerSymbol = field.NewString(table, "ticker_symbol")
	a.TradePrice = field.NewFloat64(table, "trade_price")
	a.CurrentPrice = field.NewFloat64(table, "current_price")
	a.Action = field.NewString(table, "action")
	a.Method = field.NewString(table, "method")
	a.Memo = field.NewString(table, "memo")
	a.CreatedAt = field.NewTime(table, "created_at")

	a.fillFieldMap()

	return a
}

func (a *analyzeStockBrandPriceHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *analyzeStockBrandPriceHistory) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 9)
	a.fieldMap["id"] = a.ID
	a.fieldMap["stock_brand_id"] = a.StockBrandID
	a.fieldMap["ticker_symbol"] = a.TickerSymbol
	a.fieldMap["trade_price"] = a.TradePrice
	a.fieldMap["current_price"] = a.CurrentPrice
	a.fieldMap["action"] = a.Action
	a.fieldMap["method"] = a.Method
	a.fieldMap["memo"] = a.Memo
	a.fieldMap["created_at"] = a.CreatedAt
}

func (a analyzeStockBrandPriceHistory) clone(db *gorm.DB) analyzeStockBrandPriceHistory {
	a.analyzeStockBrandPriceHistoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a analyzeStockBrandPriceHistory) replaceDB(db *gorm.DB) analyzeStockBrandPriceHistory {
	a.analyzeStockBrandPriceHistoryDo.ReplaceDB(db)
	return a
}

type analyzeStockBrandPriceHistoryDo struct{ gen.DO }

type IAnalyzeStockBrandPriceHistoryDo interface {
	gen.SubQuery
	Debug() IAnalyzeStockBrandPriceHistoryDo
	WithContext(ctx context.Context) IAnalyzeStockBrandPriceHistoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAnalyzeStockBrandPriceHistoryDo
	WriteDB() IAnalyzeStockBrandPriceHistoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAnalyzeStockBrandPriceHistoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAnalyzeStockBrandPriceHistoryDo
	Not(conds ...gen.Condition) IAnalyzeStockBrandPriceHistoryDo
	Or(conds ...gen.Condition) IAnalyzeStockBrandPriceHistoryDo
	Select(conds ...field.Expr) IAnalyzeStockBrandPriceHistoryDo
	Where(conds ...gen.Condition) IAnalyzeStockBrandPriceHistoryDo
	Order(conds ...field.Expr) IAnalyzeStockBrandPriceHistoryDo
	Distinct(cols ...field.Expr) IAnalyzeStockBrandPriceHistoryDo
	Omit(cols ...field.Expr) IAnalyzeStockBrandPriceHistoryDo
	Join(table schema.Tabler, on ...field.Expr) IAnalyzeStockBrandPriceHistoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAnalyzeStockBrandPriceHistoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAnalyzeStockBrandPriceHistoryDo
	Group(cols ...field.Expr) IAnalyzeStockBrandPriceHistoryDo
	Having(conds ...gen.Condition) IAnalyzeStockBrandPriceHistoryDo
	Limit(limit int) IAnalyzeStockBrandPriceHistoryDo
	Offset(offset int) IAnalyzeStockBrandPriceHistoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAnalyzeStockBrandPriceHistoryDo
	Unscoped() IAnalyzeStockBrandPriceHistoryDo
	Create(values ...*gen_model.AnalyzeStockBrandPriceHistory) error
	CreateInBatches(values []*gen_model.AnalyzeStockBrandPriceHistory, batchSize int) error
	Save(values ...*gen_model.AnalyzeStockBrandPriceHistory) error
	First() (*gen_model.AnalyzeStockBrandPriceHistory, error)
	Take() (*gen_model.AnalyzeStockBrandPriceHistory, error)
	Last() (*gen_model.AnalyzeStockBrandPriceHistory, error)
	Find() ([]*gen_model.AnalyzeStockBrandPriceHistory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.AnalyzeStockBrandPriceHistory, err error)
	FindInBatches(result *[]*gen_model.AnalyzeStockBrandPriceHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*gen_model.AnalyzeStockBrandPriceHistory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAnalyzeStockBrandPriceHistoryDo
	Assign(attrs ...field.AssignExpr) IAnalyzeStockBrandPriceHistoryDo
	Joins(fields ...field.RelationField) IAnalyzeStockBrandPriceHistoryDo
	Preload(fields ...field.RelationField) IAnalyzeStockBrandPriceHistoryDo
	FirstOrInit() (*gen_model.AnalyzeStockBrandPriceHistory, error)
	FirstOrCreate() (*gen_model.AnalyzeStockBrandPriceHistory, error)
	FindByPage(offset int, limit int) (result []*gen_model.AnalyzeStockBrandPriceHistory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAnalyzeStockBrandPriceHistoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a analyzeStockBrandPriceHistoryDo) Debug() IAnalyzeStockBrandPriceHistoryDo {
	return a.withDO(a.DO.Debug())
}

func (a analyzeStockBrandPriceHistoryDo) WithContext(ctx context.Context) IAnalyzeStockBrandPriceHistoryDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a analyzeStockBrandPriceHistoryDo) ReadDB() IAnalyzeStockBrandPriceHistoryDo {
	return a.Clauses(dbresolver.Read)
}

func (a analyzeStockBrandPriceHistoryDo) WriteDB() IAnalyzeStockBrandPriceHistoryDo {
	return a.Clauses(dbresolver.Write)
}

func (a analyzeStockBrandPriceHistoryDo) Session(config *gorm.Session) IAnalyzeStockBrandPriceHistoryDo {
	return a.withDO(a.DO.Session(config))
}

func (a analyzeStockBrandPriceHistoryDo) Clauses(conds ...clause.Expression) IAnalyzeStockBrandPriceHistoryDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a analyzeStockBrandPriceHistoryDo) Returning(value interface{}, columns ...string) IAnalyzeStockBrandPriceHistoryDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a analyzeStockBrandPriceHistoryDo) Not(conds ...gen.Condition) IAnalyzeStockBrandPriceHistoryDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a analyzeStockBrandPriceHistoryDo) Or(conds ...gen.Condition) IAnalyzeStockBrandPriceHistoryDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a analyzeStockBrandPriceHistoryDo) Select(conds ...field.Expr) IAnalyzeStockBrandPriceHistoryDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a analyzeStockBrandPriceHistoryDo) Where(conds ...gen.Condition) IAnalyzeStockBrandPriceHistoryDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a analyzeStockBrandPriceHistoryDo) Order(conds ...field.Expr) IAnalyzeStockBrandPriceHistoryDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a analyzeStockBrandPriceHistoryDo) Distinct(cols ...field.Expr) IAnalyzeStockBrandPriceHistoryDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a analyzeStockBrandPriceHistoryDo) Omit(cols ...field.Expr) IAnalyzeStockBrandPriceHistoryDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a analyzeStockBrandPriceHistoryDo) Join(table schema.Tabler, on ...field.Expr) IAnalyzeStockBrandPriceHistoryDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a analyzeStockBrandPriceHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAnalyzeStockBrandPriceHistoryDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a analyzeStockBrandPriceHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) IAnalyzeStockBrandPriceHistoryDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a analyzeStockBrandPriceHistoryDo) Group(cols ...field.Expr) IAnalyzeStockBrandPriceHistoryDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a analyzeStockBrandPriceHistoryDo) Having(conds ...gen.Condition) IAnalyzeStockBrandPriceHistoryDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a analyzeStockBrandPriceHistoryDo) Limit(limit int) IAnalyzeStockBrandPriceHistoryDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a analyzeStockBrandPriceHistoryDo) Offset(offset int) IAnalyzeStockBrandPriceHistoryDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a analyzeStockBrandPriceHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAnalyzeStockBrandPriceHistoryDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a analyzeStockBrandPriceHistoryDo) Unscoped() IAnalyzeStockBrandPriceHistoryDo {
	return a.withDO(a.DO.Unscoped())
}

func (a analyzeStockBrandPriceHistoryDo) Create(values ...*gen_model.AnalyzeStockBrandPriceHistory) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a analyzeStockBrandPriceHistoryDo) CreateInBatches(values []*gen_model.AnalyzeStockBrandPriceHistory, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a analyzeStockBrandPriceHistoryDo) Save(values ...*gen_model.AnalyzeStockBrandPriceHistory) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a analyzeStockBrandPriceHistoryDo) First() (*gen_model.AnalyzeStockBrandPriceHistory, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.AnalyzeStockBrandPriceHistory), nil
	}
}

func (a analyzeStockBrandPriceHistoryDo) Take() (*gen_model.AnalyzeStockBrandPriceHistory, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.AnalyzeStockBrandPriceHistory), nil
	}
}

func (a analyzeStockBrandPriceHistoryDo) Last() (*gen_model.AnalyzeStockBrandPriceHistory, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.AnalyzeStockBrandPriceHistory), nil
	}
}

func (a analyzeStockBrandPriceHistoryDo) Find() ([]*gen_model.AnalyzeStockBrandPriceHistory, error) {
	result, err := a.DO.Find()
	return result.([]*gen_model.AnalyzeStockBrandPriceHistory), err
}

func (a analyzeStockBrandPriceHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.AnalyzeStockBrandPriceHistory, err error) {
	buf := make([]*gen_model.AnalyzeStockBrandPriceHistory, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a analyzeStockBrandPriceHistoryDo) FindInBatches(result *[]*gen_model.AnalyzeStockBrandPriceHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a analyzeStockBrandPriceHistoryDo) Attrs(attrs ...field.AssignExpr) IAnalyzeStockBrandPriceHistoryDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a analyzeStockBrandPriceHistoryDo) Assign(attrs ...field.AssignExpr) IAnalyzeStockBrandPriceHistoryDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a analyzeStockBrandPriceHistoryDo) Joins(fields ...field.RelationField) IAnalyzeStockBrandPriceHistoryDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a analyzeStockBrandPriceHistoryDo) Preload(fields ...field.RelationField) IAnalyzeStockBrandPriceHistoryDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a analyzeStockBrandPriceHistoryDo) FirstOrInit() (*gen_model.AnalyzeStockBrandPriceHistory, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.AnalyzeStockBrandPriceHistory), nil
	}
}

func (a analyzeStockBrandPriceHistoryDo) FirstOrCreate() (*gen_model.AnalyzeStockBrandPriceHistory, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.AnalyzeStockBrandPriceHistory), nil
	}
}

func (a analyzeStockBrandPriceHistoryDo) FindByPage(offset int, limit int) (result []*gen_model.AnalyzeStockBrandPriceHistory, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a analyzeStockBrandPriceHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a analyzeStockBrandPriceHistoryDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a analyzeStockBrandPriceHistoryDo) Delete(models ...*gen_model.AnalyzeStockBrandPriceHistory) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *analyzeStockBrandPriceHistoryDo) withDO(do gen.Dao) *analyzeStockBrandPriceHistoryDo {
	a.DO = *do.(*gen.DO)
	return a
}
