// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen_query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Code0716/stock-price-repository/infrastructure/database/gen_model"
)

func newHighVolumeStockBrand(db *gorm.DB, opts ...gen.DOOption) highVolumeStockBrand {
	_highVolumeStockBrand := highVolumeStockBrand{}

	_highVolumeStockBrand.highVolumeStockBrandDo.UseDB(db, opts...)
	_highVolumeStockBrand.highVolumeStockBrandDo.UseModel(&gen_model.HighVolumeStockBrand{})

	tableName := _highVolumeStockBrand.highVolumeStockBrandDo.TableName()
	_highVolumeStockBrand.ALL = field.NewAsterisk(tableName)
	_highVolumeStockBrand.StockBrandID = field.NewString(tableName, "stock_brand_id")
	_highVolumeStockBrand.TickerSymbol = field.NewString(tableName, "ticker_symbol")
	_highVolumeStockBrand.VolumeAverage = field.NewUint64(tableName, "volume_average")
	_highVolumeStockBrand.CreatedAt = field.NewTime(tableName, "created_at")

	_highVolumeStockBrand.fillFieldMap()

	return _highVolumeStockBrand
}

type highVolumeStockBrand struct {
	highVolumeStockBrandDo

	ALL           field.Asterisk
	StockBrandID  field.String // uuid
	TickerSymbol  field.String // 証券コード
	VolumeAverage field.Uint64 // 一ヶ月間の出来高平均
	CreatedAt     field.Time   // created_at

	fieldMap map[string]field.Expr
}

func (h highVolumeStockBrand) Table(newTableName string) *highVolumeStockBrand {
	h.highVolumeStockBrandDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h highVolumeStockBrand) As(alias string) *highVolumeStockBrand {
	h.highVolumeStockBrandDo.DO = *(h.highVolumeStockBrandDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *highVolumeStockBrand) updateTableName(table string) *highVolumeStockBrand {
	h.ALL = field.NewAsterisk(table)
	h.StockBrandID = field.NewString(table, "stock_brand_id")
	h.TickerSymbol = field.NewString(table, "ticker_symbol")
	h.VolumeAverage = field.NewUint64(table, "volume_average")
	h.CreatedAt = field.NewTime(table, "created_at")

	h.fillFieldMap()

	return h
}

func (h *highVolumeStockBrand) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *highVolumeStockBrand) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 4)
	h.fieldMap["stock_brand_id"] = h.StockBrandID
	h.fieldMap["ticker_symbol"] = h.TickerSymbol
	h.fieldMap["volume_average"] = h.VolumeAverage
	h.fieldMap["created_at"] = h.CreatedAt
}

func (h highVolumeStockBrand) clone(db *gorm.DB) highVolumeStockBrand {
	h.highVolumeStockBrandDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h highVolumeStockBrand) replaceDB(db *gorm.DB) highVolumeStockBrand {
	h.highVolumeStockBrandDo.ReplaceDB(db)
	return h
}

type highVolumeStockBrandDo struct{ gen.DO }

type IHighVolumeStockBrandDo interface {
	gen.SubQuery
	Debug() IHighVolumeStockBrandDo
	WithContext(ctx context.Context) IHighVolumeStockBrandDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IHighVolumeStockBrandDo
	WriteDB() IHighVolumeStockBrandDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IHighVolumeStockBrandDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHighVolumeStockBrandDo
	Not(conds ...gen.Condition) IHighVolumeStockBrandDo
	Or(conds ...gen.Condition) IHighVolumeStockBrandDo
	Select(conds ...field.Expr) IHighVolumeStockBrandDo
	Where(conds ...gen.Condition) IHighVolumeStockBrandDo
	Order(conds ...field.Expr) IHighVolumeStockBrandDo
	Distinct(cols ...field.Expr) IHighVolumeStockBrandDo
	Omit(cols ...field.Expr) IHighVolumeStockBrandDo
	Join(table schema.Tabler, on ...field.Expr) IHighVolumeStockBrandDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHighVolumeStockBrandDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHighVolumeStockBrandDo
	Group(cols ...field.Expr) IHighVolumeStockBrandDo
	Having(conds ...gen.Condition) IHighVolumeStockBrandDo
	Limit(limit int) IHighVolumeStockBrandDo
	Offset(offset int) IHighVolumeStockBrandDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHighVolumeStockBrandDo
	Unscoped() IHighVolumeStockBrandDo
	Create(values ...*gen_model.HighVolumeStockBrand) error
	CreateInBatches(values []*gen_model.HighVolumeStockBrand, batchSize int) error
	Save(values ...*gen_model.HighVolumeStockBrand) error
	First() (*gen_model.HighVolumeStockBrand, error)
	Take() (*gen_model.HighVolumeStockBrand, error)
	Last() (*gen_model.HighVolumeStockBrand, error)
	Find() ([]*gen_model.HighVolumeStockBrand, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.HighVolumeStockBrand, err error)
	FindInBatches(result *[]*gen_model.HighVolumeStockBrand, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*gen_model.HighVolumeStockBrand) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHighVolumeStockBrandDo
	Assign(attrs ...field.AssignExpr) IHighVolumeStockBrandDo
	Joins(fields ...field.RelationField) IHighVolumeStockBrandDo
	Preload(fields ...field.RelationField) IHighVolumeStockBrandDo
	FirstOrInit() (*gen_model.HighVolumeStockBrand, error)
	FirstOrCreate() (*gen_model.HighVolumeStockBrand, error)
	FindByPage(offset int, limit int) (result []*gen_model.HighVolumeStockBrand, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHighVolumeStockBrandDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h highVolumeStockBrandDo) Debug() IHighVolumeStockBrandDo {
	return h.withDO(h.DO.Debug())
}

func (h highVolumeStockBrandDo) WithContext(ctx context.Context) IHighVolumeStockBrandDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h highVolumeStockBrandDo) ReadDB() IHighVolumeStockBrandDo {
	return h.Clauses(dbresolver.Read)
}

func (h highVolumeStockBrandDo) WriteDB() IHighVolumeStockBrandDo {
	return h.Clauses(dbresolver.Write)
}

func (h highVolumeStockBrandDo) Session(config *gorm.Session) IHighVolumeStockBrandDo {
	return h.withDO(h.DO.Session(config))
}

func (h highVolumeStockBrandDo) Clauses(conds ...clause.Expression) IHighVolumeStockBrandDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h highVolumeStockBrandDo) Returning(value interface{}, columns ...string) IHighVolumeStockBrandDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h highVolumeStockBrandDo) Not(conds ...gen.Condition) IHighVolumeStockBrandDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h highVolumeStockBrandDo) Or(conds ...gen.Condition) IHighVolumeStockBrandDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h highVolumeStockBrandDo) Select(conds ...field.Expr) IHighVolumeStockBrandDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h highVolumeStockBrandDo) Where(conds ...gen.Condition) IHighVolumeStockBrandDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h highVolumeStockBrandDo) Order(conds ...field.Expr) IHighVolumeStockBrandDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h highVolumeStockBrandDo) Distinct(cols ...field.Expr) IHighVolumeStockBrandDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h highVolumeStockBrandDo) Omit(cols ...field.Expr) IHighVolumeStockBrandDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h highVolumeStockBrandDo) Join(table schema.Tabler, on ...field.Expr) IHighVolumeStockBrandDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h highVolumeStockBrandDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHighVolumeStockBrandDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h highVolumeStockBrandDo) RightJoin(table schema.Tabler, on ...field.Expr) IHighVolumeStockBrandDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h highVolumeStockBrandDo) Group(cols ...field.Expr) IHighVolumeStockBrandDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h highVolumeStockBrandDo) Having(conds ...gen.Condition) IHighVolumeStockBrandDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h highVolumeStockBrandDo) Limit(limit int) IHighVolumeStockBrandDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h highVolumeStockBrandDo) Offset(offset int) IHighVolumeStockBrandDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h highVolumeStockBrandDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHighVolumeStockBrandDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h highVolumeStockBrandDo) Unscoped() IHighVolumeStockBrandDo {
	return h.withDO(h.DO.Unscoped())
}

func (h highVolumeStockBrandDo) Create(values ...*gen_model.HighVolumeStockBrand) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h highVolumeStockBrandDo) CreateInBatches(values []*gen_model.HighVolumeStockBrand, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h highVolumeStockBrandDo) Save(values ...*gen_model.HighVolumeStockBrand) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h highVolumeStockBrandDo) First() (*gen_model.HighVolumeStockBrand, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.HighVolumeStockBrand), nil
	}
}

func (h highVolumeStockBrandDo) Take() (*gen_model.HighVolumeStockBrand, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.HighVolumeStockBrand), nil
	}
}

func (h highVolumeStockBrandDo) Last() (*gen_model.HighVolumeStockBrand, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.HighVolumeStockBrand), nil
	}
}

func (h highVolumeStockBrandDo) Find() ([]*gen_model.HighVolumeStockBrand, error) {
	result, err := h.DO.Find()
	return result.([]*gen_model.HighVolumeStockBrand), err
}

func (h highVolumeStockBrandDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.HighVolumeStockBrand, err error) {
	buf := make([]*gen_model.HighVolumeStockBrand, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h highVolumeStockBrandDo) FindInBatches(result *[]*gen_model.HighVolumeStockBrand, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h highVolumeStockBrandDo) Attrs(attrs ...field.AssignExpr) IHighVolumeStockBrandDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h highVolumeStockBrandDo) Assign(attrs ...field.AssignExpr) IHighVolumeStockBrandDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h highVolumeStockBrandDo) Joins(fields ...field.RelationField) IHighVolumeStockBrandDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h highVolumeStockBrandDo) Preload(fields ...field.RelationField) IHighVolumeStockBrandDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h highVolumeStockBrandDo) FirstOrInit() (*gen_model.HighVolumeStockBrand, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.HighVolumeStockBrand), nil
	}
}

func (h highVolumeStockBrandDo) FirstOrCreate() (*gen_model.HighVolumeStockBrand, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.HighVolumeStockBrand), nil
	}
}

func (h highVolumeStockBrandDo) FindByPage(offset int, limit int) (result []*gen_model.HighVolumeStockBrand, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h highVolumeStockBrandDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h highVolumeStockBrandDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h highVolumeStockBrandDo) Delete(models ...*gen_model.HighVolumeStockBrand) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *highVolumeStockBrandDo) withDO(do gen.Dao) *highVolumeStockBrandDo {
	h.DO = *do.(*gen.DO)
	return h
}
