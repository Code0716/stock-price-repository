// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen_query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Code0716/stock-price-repository/infrastructure/database/gen_model"
)

func newStockBrandsDailyPrice(db *gorm.DB, opts ...gen.DOOption) stockBrandsDailyPrice {
	_stockBrandsDailyPrice := stockBrandsDailyPrice{}

	_stockBrandsDailyPrice.stockBrandsDailyPriceDo.UseDB(db, opts...)
	_stockBrandsDailyPrice.stockBrandsDailyPriceDo.UseModel(&gen_model.StockBrandsDailyPrice{})

	tableName := _stockBrandsDailyPrice.stockBrandsDailyPriceDo.TableName()
	_stockBrandsDailyPrice.ALL = field.NewAsterisk(tableName)
	_stockBrandsDailyPrice.ID = field.NewString(tableName, "id")
	_stockBrandsDailyPrice.StockBrandID = field.NewString(tableName, "stock_brand_id")
	_stockBrandsDailyPrice.TickerSymbol = field.NewString(tableName, "ticker_symbol")
	_stockBrandsDailyPrice.Date = field.NewTime(tableName, "date")
	_stockBrandsDailyPrice.OpenPrice = field.NewFloat64(tableName, "open_price")
	_stockBrandsDailyPrice.ClosePrice = field.NewFloat64(tableName, "close_price")
	_stockBrandsDailyPrice.HighPrice = field.NewFloat64(tableName, "high_price")
	_stockBrandsDailyPrice.LowPrice = field.NewFloat64(tableName, "low_price")
	_stockBrandsDailyPrice.AdjClosePrice = field.NewFloat64(tableName, "adj_close_price")
	_stockBrandsDailyPrice.Volume = field.NewUint64(tableName, "volume")
	_stockBrandsDailyPrice.CreatedAt = field.NewTime(tableName, "created_at")
	_stockBrandsDailyPrice.UpdatedAt = field.NewTime(tableName, "updated_at")
	_stockBrandsDailyPrice.DeletedAt = field.NewField(tableName, "deleted_at")

	_stockBrandsDailyPrice.fillFieldMap()

	return _stockBrandsDailyPrice
}

type stockBrandsDailyPrice struct {
	stockBrandsDailyPriceDo

	ALL           field.Asterisk
	ID            field.String  // uuid
	StockBrandID  field.String  // uuid
	TickerSymbol  field.String  // ticker symbol
	Date          field.Time    // date
	OpenPrice     field.Float64 // 始値
	ClosePrice    field.Float64 // 終値
	HighPrice     field.Float64 // 高値
	LowPrice      field.Float64 // 安値
	AdjClosePrice field.Float64 // 配当や株式分割を考慮した終値
	Volume        field.Uint64  // 出来高
	CreatedAt     field.Time    // created_at
	UpdatedAt     field.Time    // updated_at
	DeletedAt     field.Field   // deleted_at

	fieldMap map[string]field.Expr
}

func (s stockBrandsDailyPrice) Table(newTableName string) *stockBrandsDailyPrice {
	s.stockBrandsDailyPriceDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s stockBrandsDailyPrice) As(alias string) *stockBrandsDailyPrice {
	s.stockBrandsDailyPriceDo.DO = *(s.stockBrandsDailyPriceDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *stockBrandsDailyPrice) updateTableName(table string) *stockBrandsDailyPrice {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.StockBrandID = field.NewString(table, "stock_brand_id")
	s.TickerSymbol = field.NewString(table, "ticker_symbol")
	s.Date = field.NewTime(table, "date")
	s.OpenPrice = field.NewFloat64(table, "open_price")
	s.ClosePrice = field.NewFloat64(table, "close_price")
	s.HighPrice = field.NewFloat64(table, "high_price")
	s.LowPrice = field.NewFloat64(table, "low_price")
	s.AdjClosePrice = field.NewFloat64(table, "adj_close_price")
	s.Volume = field.NewUint64(table, "volume")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *stockBrandsDailyPrice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *stockBrandsDailyPrice) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 13)
	s.fieldMap["id"] = s.ID
	s.fieldMap["stock_brand_id"] = s.StockBrandID
	s.fieldMap["ticker_symbol"] = s.TickerSymbol
	s.fieldMap["date"] = s.Date
	s.fieldMap["open_price"] = s.OpenPrice
	s.fieldMap["close_price"] = s.ClosePrice
	s.fieldMap["high_price"] = s.HighPrice
	s.fieldMap["low_price"] = s.LowPrice
	s.fieldMap["adj_close_price"] = s.AdjClosePrice
	s.fieldMap["volume"] = s.Volume
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s stockBrandsDailyPrice) clone(db *gorm.DB) stockBrandsDailyPrice {
	s.stockBrandsDailyPriceDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s stockBrandsDailyPrice) replaceDB(db *gorm.DB) stockBrandsDailyPrice {
	s.stockBrandsDailyPriceDo.ReplaceDB(db)
	return s
}

type stockBrandsDailyPriceDo struct{ gen.DO }

type IStockBrandsDailyPriceDo interface {
	gen.SubQuery
	Debug() IStockBrandsDailyPriceDo
	WithContext(ctx context.Context) IStockBrandsDailyPriceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStockBrandsDailyPriceDo
	WriteDB() IStockBrandsDailyPriceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStockBrandsDailyPriceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStockBrandsDailyPriceDo
	Not(conds ...gen.Condition) IStockBrandsDailyPriceDo
	Or(conds ...gen.Condition) IStockBrandsDailyPriceDo
	Select(conds ...field.Expr) IStockBrandsDailyPriceDo
	Where(conds ...gen.Condition) IStockBrandsDailyPriceDo
	Order(conds ...field.Expr) IStockBrandsDailyPriceDo
	Distinct(cols ...field.Expr) IStockBrandsDailyPriceDo
	Omit(cols ...field.Expr) IStockBrandsDailyPriceDo
	Join(table schema.Tabler, on ...field.Expr) IStockBrandsDailyPriceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStockBrandsDailyPriceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStockBrandsDailyPriceDo
	Group(cols ...field.Expr) IStockBrandsDailyPriceDo
	Having(conds ...gen.Condition) IStockBrandsDailyPriceDo
	Limit(limit int) IStockBrandsDailyPriceDo
	Offset(offset int) IStockBrandsDailyPriceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStockBrandsDailyPriceDo
	Unscoped() IStockBrandsDailyPriceDo
	Create(values ...*gen_model.StockBrandsDailyPrice) error
	CreateInBatches(values []*gen_model.StockBrandsDailyPrice, batchSize int) error
	Save(values ...*gen_model.StockBrandsDailyPrice) error
	First() (*gen_model.StockBrandsDailyPrice, error)
	Take() (*gen_model.StockBrandsDailyPrice, error)
	Last() (*gen_model.StockBrandsDailyPrice, error)
	Find() ([]*gen_model.StockBrandsDailyPrice, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.StockBrandsDailyPrice, err error)
	FindInBatches(result *[]*gen_model.StockBrandsDailyPrice, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*gen_model.StockBrandsDailyPrice) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStockBrandsDailyPriceDo
	Assign(attrs ...field.AssignExpr) IStockBrandsDailyPriceDo
	Joins(fields ...field.RelationField) IStockBrandsDailyPriceDo
	Preload(fields ...field.RelationField) IStockBrandsDailyPriceDo
	FirstOrInit() (*gen_model.StockBrandsDailyPrice, error)
	FirstOrCreate() (*gen_model.StockBrandsDailyPrice, error)
	FindByPage(offset int, limit int) (result []*gen_model.StockBrandsDailyPrice, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStockBrandsDailyPriceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s stockBrandsDailyPriceDo) Debug() IStockBrandsDailyPriceDo {
	return s.withDO(s.DO.Debug())
}

func (s stockBrandsDailyPriceDo) WithContext(ctx context.Context) IStockBrandsDailyPriceDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s stockBrandsDailyPriceDo) ReadDB() IStockBrandsDailyPriceDo {
	return s.Clauses(dbresolver.Read)
}

func (s stockBrandsDailyPriceDo) WriteDB() IStockBrandsDailyPriceDo {
	return s.Clauses(dbresolver.Write)
}

func (s stockBrandsDailyPriceDo) Session(config *gorm.Session) IStockBrandsDailyPriceDo {
	return s.withDO(s.DO.Session(config))
}

func (s stockBrandsDailyPriceDo) Clauses(conds ...clause.Expression) IStockBrandsDailyPriceDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s stockBrandsDailyPriceDo) Returning(value interface{}, columns ...string) IStockBrandsDailyPriceDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s stockBrandsDailyPriceDo) Not(conds ...gen.Condition) IStockBrandsDailyPriceDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s stockBrandsDailyPriceDo) Or(conds ...gen.Condition) IStockBrandsDailyPriceDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s stockBrandsDailyPriceDo) Select(conds ...field.Expr) IStockBrandsDailyPriceDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s stockBrandsDailyPriceDo) Where(conds ...gen.Condition) IStockBrandsDailyPriceDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s stockBrandsDailyPriceDo) Order(conds ...field.Expr) IStockBrandsDailyPriceDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s stockBrandsDailyPriceDo) Distinct(cols ...field.Expr) IStockBrandsDailyPriceDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s stockBrandsDailyPriceDo) Omit(cols ...field.Expr) IStockBrandsDailyPriceDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s stockBrandsDailyPriceDo) Join(table schema.Tabler, on ...field.Expr) IStockBrandsDailyPriceDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s stockBrandsDailyPriceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStockBrandsDailyPriceDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s stockBrandsDailyPriceDo) RightJoin(table schema.Tabler, on ...field.Expr) IStockBrandsDailyPriceDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s stockBrandsDailyPriceDo) Group(cols ...field.Expr) IStockBrandsDailyPriceDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s stockBrandsDailyPriceDo) Having(conds ...gen.Condition) IStockBrandsDailyPriceDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s stockBrandsDailyPriceDo) Limit(limit int) IStockBrandsDailyPriceDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s stockBrandsDailyPriceDo) Offset(offset int) IStockBrandsDailyPriceDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s stockBrandsDailyPriceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStockBrandsDailyPriceDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s stockBrandsDailyPriceDo) Unscoped() IStockBrandsDailyPriceDo {
	return s.withDO(s.DO.Unscoped())
}

func (s stockBrandsDailyPriceDo) Create(values ...*gen_model.StockBrandsDailyPrice) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s stockBrandsDailyPriceDo) CreateInBatches(values []*gen_model.StockBrandsDailyPrice, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s stockBrandsDailyPriceDo) Save(values ...*gen_model.StockBrandsDailyPrice) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s stockBrandsDailyPriceDo) First() (*gen_model.StockBrandsDailyPrice, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.StockBrandsDailyPrice), nil
	}
}

func (s stockBrandsDailyPriceDo) Take() (*gen_model.StockBrandsDailyPrice, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.StockBrandsDailyPrice), nil
	}
}

func (s stockBrandsDailyPriceDo) Last() (*gen_model.StockBrandsDailyPrice, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.StockBrandsDailyPrice), nil
	}
}

func (s stockBrandsDailyPriceDo) Find() ([]*gen_model.StockBrandsDailyPrice, error) {
	result, err := s.DO.Find()
	return result.([]*gen_model.StockBrandsDailyPrice), err
}

func (s stockBrandsDailyPriceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.StockBrandsDailyPrice, err error) {
	buf := make([]*gen_model.StockBrandsDailyPrice, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s stockBrandsDailyPriceDo) FindInBatches(result *[]*gen_model.StockBrandsDailyPrice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s stockBrandsDailyPriceDo) Attrs(attrs ...field.AssignExpr) IStockBrandsDailyPriceDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s stockBrandsDailyPriceDo) Assign(attrs ...field.AssignExpr) IStockBrandsDailyPriceDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s stockBrandsDailyPriceDo) Joins(fields ...field.RelationField) IStockBrandsDailyPriceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s stockBrandsDailyPriceDo) Preload(fields ...field.RelationField) IStockBrandsDailyPriceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s stockBrandsDailyPriceDo) FirstOrInit() (*gen_model.StockBrandsDailyPrice, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.StockBrandsDailyPrice), nil
	}
}

func (s stockBrandsDailyPriceDo) FirstOrCreate() (*gen_model.StockBrandsDailyPrice, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.StockBrandsDailyPrice), nil
	}
}

func (s stockBrandsDailyPriceDo) FindByPage(offset int, limit int) (result []*gen_model.StockBrandsDailyPrice, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s stockBrandsDailyPriceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s stockBrandsDailyPriceDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s stockBrandsDailyPriceDo) Delete(models ...*gen_model.StockBrandsDailyPrice) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *stockBrandsDailyPriceDo) withDO(do gen.Dao) *stockBrandsDailyPriceDo {
	s.DO = *do.(*gen.DO)
	return s
}
