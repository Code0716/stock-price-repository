// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"context"
	"github.com/Code0716/stock-price-repository/driver"
	"github.com/Code0716/stock-price-repository/infrastructure/cli"
	"github.com/Code0716/stock-price-repository/infrastructure/cli/commands"
	"github.com/Code0716/stock-price-repository/infrastructure/database"
	"github.com/Code0716/stock-price-repository/usecase"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeCli(ctx context.Context) (*cli.Runner, func(), error) {
	httpRequest := driver.NewHTTPRequest()
	client := driver.OpenRedis()
	slackAPIClient := driver.NewSlackAPIClient(httpRequest, client)
	healthCheckCommand := commands.NewHealthCheckCommand(slackAPIClient)
	stockAPIClient := driver.NewStockAPIClient(httpRequest, client)
	setJQuantsAPITokenToRedisV1Command := commands.NewSetJQuantsAPITokenToRedisV1Command(stockAPIClient)
	transaction := database.NewTransaction()
	db, cleanup, err := driver.NewDBConn()
	if err != nil {
		return nil, nil, err
	}
	gormDB, err := driver.NewGorm(db)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	stockBrandRepository := database.NewStockBrandRepositoryImpl(gormDB)
	stockBrandsDailyPriceRepository := database.NewStockBrandsDailyPriceRepositoryImpl(gormDB)
	analyzeStockBrandPriceHistoryRepository := database.NewAnalyzeStockBrandPriceHistoryRepositoryImpl(gormDB)
	stockBrandsDailyPriceForAnalyzeRepository := database.NewStockBrandsDailyPriceForAnalyzeRepositoryImpl(gormDB)
	stockBrandInteractor := usecase.NewStockBrandInteractor(transaction, stockBrandRepository, stockBrandsDailyPriceRepository, analyzeStockBrandPriceHistoryRepository, stockBrandsDailyPriceForAnalyzeRepository, stockAPIClient, client)
	updateStockBrandsV1Command := commands.NewUpdateStockBrandsV1Command(stockBrandInteractor)
	stockBrandsDailyPriceInteractor := usecase.NewStockBrandsDailyPriceInteractor(transaction, stockBrandRepository, stockBrandsDailyPriceRepository, stockBrandsDailyPriceForAnalyzeRepository, stockAPIClient, client, slackAPIClient)
	createHistoricalDailyStockPricesV1Command := commands.NewCreateHistoricalDailyStockPricesV1Command(stockBrandsDailyPriceInteractor)
	createDailyStockPriceV1Command := commands.NewCreateDailyStockPriceV1Command(stockBrandsDailyPriceInteractor)
	nikkeiRepository := database.NewNikkeiRepositoryImpl(gormDB)
	djiRepository := database.NewDjiRepositoryImpl(gormDB)
	indexInteractor := usecase.NewIndexInteractor(transaction, client, nikkeiRepository, djiRepository, stockAPIClient, slackAPIClient)
	createNkkeiAndDjiHistoricalDataV1Command := commands.NewCreateNkkeiAndDjiHistoricalDataV1Command(indexInteractor)
	mySQLDumpClient := driver.NewMySQLDumpClient()
	exportSQLInteractor := usecase.NewExportSQLInteractor(mySQLDumpClient)
	exportStockBrandsAndDailyPriceToSQLV1Command := commands.NewExportStockBrandsAndDailyPriceToSQLV1Command(exportSQLInteractor)
	runner := cli.NewRunner(healthCheckCommand, setJQuantsAPITokenToRedisV1Command, updateStockBrandsV1Command, createHistoricalDailyStockPricesV1Command, createDailyStockPriceV1Command, createNkkeiAndDjiHistoricalDataV1Command, exportStockBrandsAndDailyPriceToSQLV1Command, indexInteractor, slackAPIClient)
	return runner, func() {
		cleanup()
	}, nil
}

// wire.go:

var usecaseSet = wire.NewSet(usecase.NewStockBrandInteractor, usecase.NewIndexInteractor, usecase.NewStockBrandsDailyPriceInteractor, usecase.NewExportSQLInteractor)

var driverSet = wire.NewSet(driver.NewGorm, driver.NewDBConn, driver.NewHTTPRequest, driver.NewSlackAPIClient, driver.OpenRedis, driver.NewStockAPIClient, driver.NewMySQLDumpClient)

var cliSet = wire.NewSet(cli.NewRunner, commands.NewHealthCheckCommand, commands.NewSetJQuantsAPITokenToRedisV1Command, commands.NewUpdateStockBrandsV1Command, commands.NewCreateHistoricalDailyStockPricesV1Command, commands.NewCreateDailyStockPriceV1Command, commands.NewExportStockBrandsAndDailyPriceToSQLV1Command, commands.NewCreateNkkeiAndDjiHistoricalDataV1Command)

var databaseSet = wire.NewSet(database.NewTransaction, database.NewStockBrandRepositoryImpl, database.NewNikkeiRepositoryImpl, database.NewDjiRepositoryImpl, database.NewStockBrandsDailyPriceRepositoryImpl, database.NewAnalyzeStockBrandPriceHistoryRepositoryImpl, database.NewStockBrandsDailyPriceForAnalyzeRepositoryImpl)
