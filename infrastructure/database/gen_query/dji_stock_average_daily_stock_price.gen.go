// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen_query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Code0716/stock-price-repository/infrastructure/database/gen_model"
)

func newDjiStockAverageDailyStockPrice(db *gorm.DB, opts ...gen.DOOption) djiStockAverageDailyStockPrice {
	_djiStockAverageDailyStockPrice := djiStockAverageDailyStockPrice{}

	_djiStockAverageDailyStockPrice.djiStockAverageDailyStockPriceDo.UseDB(db, opts...)
	_djiStockAverageDailyStockPrice.djiStockAverageDailyStockPriceDo.UseModel(&gen_model.DjiStockAverageDailyStockPrice{})

	tableName := _djiStockAverageDailyStockPrice.djiStockAverageDailyStockPriceDo.TableName()
	_djiStockAverageDailyStockPrice.ALL = field.NewAsterisk(tableName)
	_djiStockAverageDailyStockPrice.Date = field.NewTime(tableName, "date")
	_djiStockAverageDailyStockPrice.OpenPrice = field.NewFloat64(tableName, "open_price")
	_djiStockAverageDailyStockPrice.ClosePrice = field.NewFloat64(tableName, "close_price")
	_djiStockAverageDailyStockPrice.HighPrice = field.NewFloat64(tableName, "high_price")
	_djiStockAverageDailyStockPrice.LowPrice = field.NewFloat64(tableName, "low_price")
	_djiStockAverageDailyStockPrice.AdjClosePrice = field.NewFloat64(tableName, "adj_close_price")
	_djiStockAverageDailyStockPrice.CreatedAt = field.NewTime(tableName, "created_at")
	_djiStockAverageDailyStockPrice.UpdatedAt = field.NewTime(tableName, "updated_at")

	_djiStockAverageDailyStockPrice.fillFieldMap()

	return _djiStockAverageDailyStockPrice
}

type djiStockAverageDailyStockPrice struct {
	djiStockAverageDailyStockPriceDo

	ALL           field.Asterisk
	Date          field.Time    // date
	OpenPrice     field.Float64 // 始値
	ClosePrice    field.Float64 // 終値
	HighPrice     field.Float64 // 高値
	LowPrice      field.Float64 // 安値
	AdjClosePrice field.Float64 // 配当や株式分割を考慮した終値
	CreatedAt     field.Time    // created_at
	UpdatedAt     field.Time    // updated_at

	fieldMap map[string]field.Expr
}

func (d djiStockAverageDailyStockPrice) Table(newTableName string) *djiStockAverageDailyStockPrice {
	d.djiStockAverageDailyStockPriceDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d djiStockAverageDailyStockPrice) As(alias string) *djiStockAverageDailyStockPrice {
	d.djiStockAverageDailyStockPriceDo.DO = *(d.djiStockAverageDailyStockPriceDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *djiStockAverageDailyStockPrice) updateTableName(table string) *djiStockAverageDailyStockPrice {
	d.ALL = field.NewAsterisk(table)
	d.Date = field.NewTime(table, "date")
	d.OpenPrice = field.NewFloat64(table, "open_price")
	d.ClosePrice = field.NewFloat64(table, "close_price")
	d.HighPrice = field.NewFloat64(table, "high_price")
	d.LowPrice = field.NewFloat64(table, "low_price")
	d.AdjClosePrice = field.NewFloat64(table, "adj_close_price")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")

	d.fillFieldMap()

	return d
}

func (d *djiStockAverageDailyStockPrice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *djiStockAverageDailyStockPrice) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 8)
	d.fieldMap["date"] = d.Date
	d.fieldMap["open_price"] = d.OpenPrice
	d.fieldMap["close_price"] = d.ClosePrice
	d.fieldMap["high_price"] = d.HighPrice
	d.fieldMap["low_price"] = d.LowPrice
	d.fieldMap["adj_close_price"] = d.AdjClosePrice
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
}

func (d djiStockAverageDailyStockPrice) clone(db *gorm.DB) djiStockAverageDailyStockPrice {
	d.djiStockAverageDailyStockPriceDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d djiStockAverageDailyStockPrice) replaceDB(db *gorm.DB) djiStockAverageDailyStockPrice {
	d.djiStockAverageDailyStockPriceDo.ReplaceDB(db)
	return d
}

type djiStockAverageDailyStockPriceDo struct{ gen.DO }

type IDjiStockAverageDailyStockPriceDo interface {
	gen.SubQuery
	Debug() IDjiStockAverageDailyStockPriceDo
	WithContext(ctx context.Context) IDjiStockAverageDailyStockPriceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDjiStockAverageDailyStockPriceDo
	WriteDB() IDjiStockAverageDailyStockPriceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDjiStockAverageDailyStockPriceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDjiStockAverageDailyStockPriceDo
	Not(conds ...gen.Condition) IDjiStockAverageDailyStockPriceDo
	Or(conds ...gen.Condition) IDjiStockAverageDailyStockPriceDo
	Select(conds ...field.Expr) IDjiStockAverageDailyStockPriceDo
	Where(conds ...gen.Condition) IDjiStockAverageDailyStockPriceDo
	Order(conds ...field.Expr) IDjiStockAverageDailyStockPriceDo
	Distinct(cols ...field.Expr) IDjiStockAverageDailyStockPriceDo
	Omit(cols ...field.Expr) IDjiStockAverageDailyStockPriceDo
	Join(table schema.Tabler, on ...field.Expr) IDjiStockAverageDailyStockPriceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDjiStockAverageDailyStockPriceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDjiStockAverageDailyStockPriceDo
	Group(cols ...field.Expr) IDjiStockAverageDailyStockPriceDo
	Having(conds ...gen.Condition) IDjiStockAverageDailyStockPriceDo
	Limit(limit int) IDjiStockAverageDailyStockPriceDo
	Offset(offset int) IDjiStockAverageDailyStockPriceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDjiStockAverageDailyStockPriceDo
	Unscoped() IDjiStockAverageDailyStockPriceDo
	Create(values ...*gen_model.DjiStockAverageDailyStockPrice) error
	CreateInBatches(values []*gen_model.DjiStockAverageDailyStockPrice, batchSize int) error
	Save(values ...*gen_model.DjiStockAverageDailyStockPrice) error
	First() (*gen_model.DjiStockAverageDailyStockPrice, error)
	Take() (*gen_model.DjiStockAverageDailyStockPrice, error)
	Last() (*gen_model.DjiStockAverageDailyStockPrice, error)
	Find() ([]*gen_model.DjiStockAverageDailyStockPrice, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.DjiStockAverageDailyStockPrice, err error)
	FindInBatches(result *[]*gen_model.DjiStockAverageDailyStockPrice, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*gen_model.DjiStockAverageDailyStockPrice) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDjiStockAverageDailyStockPriceDo
	Assign(attrs ...field.AssignExpr) IDjiStockAverageDailyStockPriceDo
	Joins(fields ...field.RelationField) IDjiStockAverageDailyStockPriceDo
	Preload(fields ...field.RelationField) IDjiStockAverageDailyStockPriceDo
	FirstOrInit() (*gen_model.DjiStockAverageDailyStockPrice, error)
	FirstOrCreate() (*gen_model.DjiStockAverageDailyStockPrice, error)
	FindByPage(offset int, limit int) (result []*gen_model.DjiStockAverageDailyStockPrice, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDjiStockAverageDailyStockPriceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d djiStockAverageDailyStockPriceDo) Debug() IDjiStockAverageDailyStockPriceDo {
	return d.withDO(d.DO.Debug())
}

func (d djiStockAverageDailyStockPriceDo) WithContext(ctx context.Context) IDjiStockAverageDailyStockPriceDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d djiStockAverageDailyStockPriceDo) ReadDB() IDjiStockAverageDailyStockPriceDo {
	return d.Clauses(dbresolver.Read)
}

func (d djiStockAverageDailyStockPriceDo) WriteDB() IDjiStockAverageDailyStockPriceDo {
	return d.Clauses(dbresolver.Write)
}

func (d djiStockAverageDailyStockPriceDo) Session(config *gorm.Session) IDjiStockAverageDailyStockPriceDo {
	return d.withDO(d.DO.Session(config))
}

func (d djiStockAverageDailyStockPriceDo) Clauses(conds ...clause.Expression) IDjiStockAverageDailyStockPriceDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d djiStockAverageDailyStockPriceDo) Returning(value interface{}, columns ...string) IDjiStockAverageDailyStockPriceDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d djiStockAverageDailyStockPriceDo) Not(conds ...gen.Condition) IDjiStockAverageDailyStockPriceDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d djiStockAverageDailyStockPriceDo) Or(conds ...gen.Condition) IDjiStockAverageDailyStockPriceDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d djiStockAverageDailyStockPriceDo) Select(conds ...field.Expr) IDjiStockAverageDailyStockPriceDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d djiStockAverageDailyStockPriceDo) Where(conds ...gen.Condition) IDjiStockAverageDailyStockPriceDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d djiStockAverageDailyStockPriceDo) Order(conds ...field.Expr) IDjiStockAverageDailyStockPriceDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d djiStockAverageDailyStockPriceDo) Distinct(cols ...field.Expr) IDjiStockAverageDailyStockPriceDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d djiStockAverageDailyStockPriceDo) Omit(cols ...field.Expr) IDjiStockAverageDailyStockPriceDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d djiStockAverageDailyStockPriceDo) Join(table schema.Tabler, on ...field.Expr) IDjiStockAverageDailyStockPriceDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d djiStockAverageDailyStockPriceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDjiStockAverageDailyStockPriceDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d djiStockAverageDailyStockPriceDo) RightJoin(table schema.Tabler, on ...field.Expr) IDjiStockAverageDailyStockPriceDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d djiStockAverageDailyStockPriceDo) Group(cols ...field.Expr) IDjiStockAverageDailyStockPriceDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d djiStockAverageDailyStockPriceDo) Having(conds ...gen.Condition) IDjiStockAverageDailyStockPriceDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d djiStockAverageDailyStockPriceDo) Limit(limit int) IDjiStockAverageDailyStockPriceDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d djiStockAverageDailyStockPriceDo) Offset(offset int) IDjiStockAverageDailyStockPriceDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d djiStockAverageDailyStockPriceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDjiStockAverageDailyStockPriceDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d djiStockAverageDailyStockPriceDo) Unscoped() IDjiStockAverageDailyStockPriceDo {
	return d.withDO(d.DO.Unscoped())
}

func (d djiStockAverageDailyStockPriceDo) Create(values ...*gen_model.DjiStockAverageDailyStockPrice) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d djiStockAverageDailyStockPriceDo) CreateInBatches(values []*gen_model.DjiStockAverageDailyStockPrice, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d djiStockAverageDailyStockPriceDo) Save(values ...*gen_model.DjiStockAverageDailyStockPrice) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d djiStockAverageDailyStockPriceDo) First() (*gen_model.DjiStockAverageDailyStockPrice, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.DjiStockAverageDailyStockPrice), nil
	}
}

func (d djiStockAverageDailyStockPriceDo) Take() (*gen_model.DjiStockAverageDailyStockPrice, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.DjiStockAverageDailyStockPrice), nil
	}
}

func (d djiStockAverageDailyStockPriceDo) Last() (*gen_model.DjiStockAverageDailyStockPrice, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.DjiStockAverageDailyStockPrice), nil
	}
}

func (d djiStockAverageDailyStockPriceDo) Find() ([]*gen_model.DjiStockAverageDailyStockPrice, error) {
	result, err := d.DO.Find()
	return result.([]*gen_model.DjiStockAverageDailyStockPrice), err
}

func (d djiStockAverageDailyStockPriceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.DjiStockAverageDailyStockPrice, err error) {
	buf := make([]*gen_model.DjiStockAverageDailyStockPrice, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d djiStockAverageDailyStockPriceDo) FindInBatches(result *[]*gen_model.DjiStockAverageDailyStockPrice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d djiStockAverageDailyStockPriceDo) Attrs(attrs ...field.AssignExpr) IDjiStockAverageDailyStockPriceDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d djiStockAverageDailyStockPriceDo) Assign(attrs ...field.AssignExpr) IDjiStockAverageDailyStockPriceDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d djiStockAverageDailyStockPriceDo) Joins(fields ...field.RelationField) IDjiStockAverageDailyStockPriceDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d djiStockAverageDailyStockPriceDo) Preload(fields ...field.RelationField) IDjiStockAverageDailyStockPriceDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d djiStockAverageDailyStockPriceDo) FirstOrInit() (*gen_model.DjiStockAverageDailyStockPrice, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.DjiStockAverageDailyStockPrice), nil
	}
}

func (d djiStockAverageDailyStockPriceDo) FirstOrCreate() (*gen_model.DjiStockAverageDailyStockPrice, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.DjiStockAverageDailyStockPrice), nil
	}
}

func (d djiStockAverageDailyStockPriceDo) FindByPage(offset int, limit int) (result []*gen_model.DjiStockAverageDailyStockPrice, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d djiStockAverageDailyStockPriceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d djiStockAverageDailyStockPriceDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d djiStockAverageDailyStockPriceDo) Delete(models ...*gen_model.DjiStockAverageDailyStockPrice) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *djiStockAverageDailyStockPriceDo) withDO(do gen.Dao) *djiStockAverageDailyStockPriceDo {
	d.DO = *do.(*gen.DO)
	return d
}
