// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen_query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Code0716/stock-price-repository/infrastructure/database/gen_model"
)

func newSector17AverageDailyPrice(db *gorm.DB, opts ...gen.DOOption) sector17AverageDailyPrice {
	_sector17AverageDailyPrice := sector17AverageDailyPrice{}

	_sector17AverageDailyPrice.sector17AverageDailyPriceDo.UseDB(db, opts...)
	_sector17AverageDailyPrice.sector17AverageDailyPriceDo.UseModel(&gen_model.Sector17AverageDailyPrice{})

	tableName := _sector17AverageDailyPrice.sector17AverageDailyPriceDo.TableName()
	_sector17AverageDailyPrice.ALL = field.NewAsterisk(tableName)
	_sector17AverageDailyPrice.ID = field.NewString(tableName, "id")
	_sector17AverageDailyPrice.Date = field.NewTime(tableName, "date")
	_sector17AverageDailyPrice.Sector33Code = field.NewString(tableName, "sector_33_code")
	_sector17AverageDailyPrice.Sector17Code = field.NewString(tableName, "sector_17_code")
	_sector17AverageDailyPrice.OpenPrice = field.NewFloat64(tableName, "open_price")
	_sector17AverageDailyPrice.ClosePrice = field.NewFloat64(tableName, "close_price")
	_sector17AverageDailyPrice.HighPrice = field.NewFloat64(tableName, "high_price")
	_sector17AverageDailyPrice.LowPrice = field.NewFloat64(tableName, "low_price")
	_sector17AverageDailyPrice.AdjClosePrice = field.NewFloat64(tableName, "adj_close_price")
	_sector17AverageDailyPrice.CreatedAt = field.NewTime(tableName, "created_at")
	_sector17AverageDailyPrice.UpdatedAt = field.NewTime(tableName, "updated_at")

	_sector17AverageDailyPrice.fillFieldMap()

	return _sector17AverageDailyPrice
}

type sector17AverageDailyPrice struct {
	sector17AverageDailyPriceDo

	ALL           field.Asterisk
	ID            field.String  // uuid
	Date          field.Time    // date
	Sector33Code  field.String  // 33業種コード
	Sector17Code  field.String  // 17業種コード
	OpenPrice     field.Float64 // 始値
	ClosePrice    field.Float64 // 終値
	HighPrice     field.Float64 // 高値
	LowPrice      field.Float64 // 安値
	AdjClosePrice field.Float64 // 配当や株式分割を考慮した終値
	CreatedAt     field.Time    // created_at
	UpdatedAt     field.Time    // updated_at

	fieldMap map[string]field.Expr
}

func (s sector17AverageDailyPrice) Table(newTableName string) *sector17AverageDailyPrice {
	s.sector17AverageDailyPriceDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sector17AverageDailyPrice) As(alias string) *sector17AverageDailyPrice {
	s.sector17AverageDailyPriceDo.DO = *(s.sector17AverageDailyPriceDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sector17AverageDailyPrice) updateTableName(table string) *sector17AverageDailyPrice {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.Date = field.NewTime(table, "date")
	s.Sector33Code = field.NewString(table, "sector_33_code")
	s.Sector17Code = field.NewString(table, "sector_17_code")
	s.OpenPrice = field.NewFloat64(table, "open_price")
	s.ClosePrice = field.NewFloat64(table, "close_price")
	s.HighPrice = field.NewFloat64(table, "high_price")
	s.LowPrice = field.NewFloat64(table, "low_price")
	s.AdjClosePrice = field.NewFloat64(table, "adj_close_price")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *sector17AverageDailyPrice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sector17AverageDailyPrice) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["date"] = s.Date
	s.fieldMap["sector_33_code"] = s.Sector33Code
	s.fieldMap["sector_17_code"] = s.Sector17Code
	s.fieldMap["open_price"] = s.OpenPrice
	s.fieldMap["close_price"] = s.ClosePrice
	s.fieldMap["high_price"] = s.HighPrice
	s.fieldMap["low_price"] = s.LowPrice
	s.fieldMap["adj_close_price"] = s.AdjClosePrice
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s sector17AverageDailyPrice) clone(db *gorm.DB) sector17AverageDailyPrice {
	s.sector17AverageDailyPriceDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sector17AverageDailyPrice) replaceDB(db *gorm.DB) sector17AverageDailyPrice {
	s.sector17AverageDailyPriceDo.ReplaceDB(db)
	return s
}

type sector17AverageDailyPriceDo struct{ gen.DO }

type ISector17AverageDailyPriceDo interface {
	gen.SubQuery
	Debug() ISector17AverageDailyPriceDo
	WithContext(ctx context.Context) ISector17AverageDailyPriceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISector17AverageDailyPriceDo
	WriteDB() ISector17AverageDailyPriceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISector17AverageDailyPriceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISector17AverageDailyPriceDo
	Not(conds ...gen.Condition) ISector17AverageDailyPriceDo
	Or(conds ...gen.Condition) ISector17AverageDailyPriceDo
	Select(conds ...field.Expr) ISector17AverageDailyPriceDo
	Where(conds ...gen.Condition) ISector17AverageDailyPriceDo
	Order(conds ...field.Expr) ISector17AverageDailyPriceDo
	Distinct(cols ...field.Expr) ISector17AverageDailyPriceDo
	Omit(cols ...field.Expr) ISector17AverageDailyPriceDo
	Join(table schema.Tabler, on ...field.Expr) ISector17AverageDailyPriceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISector17AverageDailyPriceDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISector17AverageDailyPriceDo
	Group(cols ...field.Expr) ISector17AverageDailyPriceDo
	Having(conds ...gen.Condition) ISector17AverageDailyPriceDo
	Limit(limit int) ISector17AverageDailyPriceDo
	Offset(offset int) ISector17AverageDailyPriceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISector17AverageDailyPriceDo
	Unscoped() ISector17AverageDailyPriceDo
	Create(values ...*gen_model.Sector17AverageDailyPrice) error
	CreateInBatches(values []*gen_model.Sector17AverageDailyPrice, batchSize int) error
	Save(values ...*gen_model.Sector17AverageDailyPrice) error
	First() (*gen_model.Sector17AverageDailyPrice, error)
	Take() (*gen_model.Sector17AverageDailyPrice, error)
	Last() (*gen_model.Sector17AverageDailyPrice, error)
	Find() ([]*gen_model.Sector17AverageDailyPrice, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.Sector17AverageDailyPrice, err error)
	FindInBatches(result *[]*gen_model.Sector17AverageDailyPrice, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*gen_model.Sector17AverageDailyPrice) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISector17AverageDailyPriceDo
	Assign(attrs ...field.AssignExpr) ISector17AverageDailyPriceDo
	Joins(fields ...field.RelationField) ISector17AverageDailyPriceDo
	Preload(fields ...field.RelationField) ISector17AverageDailyPriceDo
	FirstOrInit() (*gen_model.Sector17AverageDailyPrice, error)
	FirstOrCreate() (*gen_model.Sector17AverageDailyPrice, error)
	FindByPage(offset int, limit int) (result []*gen_model.Sector17AverageDailyPrice, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISector17AverageDailyPriceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sector17AverageDailyPriceDo) Debug() ISector17AverageDailyPriceDo {
	return s.withDO(s.DO.Debug())
}

func (s sector17AverageDailyPriceDo) WithContext(ctx context.Context) ISector17AverageDailyPriceDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sector17AverageDailyPriceDo) ReadDB() ISector17AverageDailyPriceDo {
	return s.Clauses(dbresolver.Read)
}

func (s sector17AverageDailyPriceDo) WriteDB() ISector17AverageDailyPriceDo {
	return s.Clauses(dbresolver.Write)
}

func (s sector17AverageDailyPriceDo) Session(config *gorm.Session) ISector17AverageDailyPriceDo {
	return s.withDO(s.DO.Session(config))
}

func (s sector17AverageDailyPriceDo) Clauses(conds ...clause.Expression) ISector17AverageDailyPriceDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sector17AverageDailyPriceDo) Returning(value interface{}, columns ...string) ISector17AverageDailyPriceDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sector17AverageDailyPriceDo) Not(conds ...gen.Condition) ISector17AverageDailyPriceDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sector17AverageDailyPriceDo) Or(conds ...gen.Condition) ISector17AverageDailyPriceDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sector17AverageDailyPriceDo) Select(conds ...field.Expr) ISector17AverageDailyPriceDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sector17AverageDailyPriceDo) Where(conds ...gen.Condition) ISector17AverageDailyPriceDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sector17AverageDailyPriceDo) Order(conds ...field.Expr) ISector17AverageDailyPriceDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sector17AverageDailyPriceDo) Distinct(cols ...field.Expr) ISector17AverageDailyPriceDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sector17AverageDailyPriceDo) Omit(cols ...field.Expr) ISector17AverageDailyPriceDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sector17AverageDailyPriceDo) Join(table schema.Tabler, on ...field.Expr) ISector17AverageDailyPriceDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sector17AverageDailyPriceDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISector17AverageDailyPriceDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sector17AverageDailyPriceDo) RightJoin(table schema.Tabler, on ...field.Expr) ISector17AverageDailyPriceDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sector17AverageDailyPriceDo) Group(cols ...field.Expr) ISector17AverageDailyPriceDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sector17AverageDailyPriceDo) Having(conds ...gen.Condition) ISector17AverageDailyPriceDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sector17AverageDailyPriceDo) Limit(limit int) ISector17AverageDailyPriceDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sector17AverageDailyPriceDo) Offset(offset int) ISector17AverageDailyPriceDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sector17AverageDailyPriceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISector17AverageDailyPriceDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sector17AverageDailyPriceDo) Unscoped() ISector17AverageDailyPriceDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sector17AverageDailyPriceDo) Create(values ...*gen_model.Sector17AverageDailyPrice) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sector17AverageDailyPriceDo) CreateInBatches(values []*gen_model.Sector17AverageDailyPrice, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sector17AverageDailyPriceDo) Save(values ...*gen_model.Sector17AverageDailyPrice) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sector17AverageDailyPriceDo) First() (*gen_model.Sector17AverageDailyPrice, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Sector17AverageDailyPrice), nil
	}
}

func (s sector17AverageDailyPriceDo) Take() (*gen_model.Sector17AverageDailyPrice, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Sector17AverageDailyPrice), nil
	}
}

func (s sector17AverageDailyPriceDo) Last() (*gen_model.Sector17AverageDailyPrice, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Sector17AverageDailyPrice), nil
	}
}

func (s sector17AverageDailyPriceDo) Find() ([]*gen_model.Sector17AverageDailyPrice, error) {
	result, err := s.DO.Find()
	return result.([]*gen_model.Sector17AverageDailyPrice), err
}

func (s sector17AverageDailyPriceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.Sector17AverageDailyPrice, err error) {
	buf := make([]*gen_model.Sector17AverageDailyPrice, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sector17AverageDailyPriceDo) FindInBatches(result *[]*gen_model.Sector17AverageDailyPrice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sector17AverageDailyPriceDo) Attrs(attrs ...field.AssignExpr) ISector17AverageDailyPriceDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sector17AverageDailyPriceDo) Assign(attrs ...field.AssignExpr) ISector17AverageDailyPriceDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sector17AverageDailyPriceDo) Joins(fields ...field.RelationField) ISector17AverageDailyPriceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sector17AverageDailyPriceDo) Preload(fields ...field.RelationField) ISector17AverageDailyPriceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sector17AverageDailyPriceDo) FirstOrInit() (*gen_model.Sector17AverageDailyPrice, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Sector17AverageDailyPrice), nil
	}
}

func (s sector17AverageDailyPriceDo) FirstOrCreate() (*gen_model.Sector17AverageDailyPrice, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Sector17AverageDailyPrice), nil
	}
}

func (s sector17AverageDailyPriceDo) FindByPage(offset int, limit int) (result []*gen_model.Sector17AverageDailyPrice, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sector17AverageDailyPriceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sector17AverageDailyPriceDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sector17AverageDailyPriceDo) Delete(models ...*gen_model.Sector17AverageDailyPrice) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sector17AverageDailyPriceDo) withDO(do gen.Dao) *sector17AverageDailyPriceDo {
	s.DO = *do.(*gen.DO)
	return s
}
